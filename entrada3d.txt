var p = 0;
var h = 0;
var stack [];
var heap [];
t0 = h; 	//Posicion actual del h
heap[h] = 81;	//Q
h = h + 1;
heap[h] = 117;	//u
h = h + 1;
heap[h] = 101;	//e
h = h + 1;
heap[h] = 32;	// 
h = h + 1;
heap[h] = 112;	//p
h = h + 1;
heap[h] = 117;	//u
h = h + 1;
heap[h] = 116;	//t
h = h + 1;
heap[h] = 97;	//a
h = h + 1;
heap[h] = 115;	//s
h = h + 1;
heap[h] = 1408491350;	// Fin de cadena
h = h + 1;
t1 = h; 	//Posicion actual del h
heap[h] = 109;	//m
h = h + 1;
heap[h] = 101;	//e
h = h + 1;
heap[h] = 32;	// 
h = h + 1;
heap[h] = 99;	//c
h = h + 1;
heap[h] = 97;	//a
h = h + 1;
heap[h] = 103;	//g
h = h + 1;
heap[h] = 111;	//o
h = h + 1;
heap[h] = 32;	// 
h = h + 1;
heap[h] = 101;	//e
h = h + 1;
heap[h] = 110;	//n
h = h + 1;
heap[h] = 32;	// 
h = h + 1;
heap[h] = 108;	//l
h = h + 1;
heap[h] = 97;	//a
h = h + 1;
heap[h] = 32;	// 
h = h + 1;
heap[h] = 112;	//p
h = h + 1;
heap[h] = 117;	//u
h = h + 1;
heap[h] = 116;	//t
h = h + 1;
heap[h] = 97;	//a
h = h + 1;
heap[h] = 32;	// 
h = h + 1;
heap[h] = 1408491350;	// Fin de cadena
h = h + 1;
t3 = p + 2; // simulaci贸n de cambio de ambito
t4 = t3 + 1; // Direccion paso parametro cadena 1
stack[t4] = t0 ;// Pasando cadena 1
t5 = t3 + 2; // Direccion paso parametro cadena 2
stack[t5] = t1 ;// Pasando cadena 1
p = p + 2; // Cambio real de ambito
call concat ;
p = p - 2; // Cambio real de ambito
t6 = p + 2; // simulaci贸n de cambio de ambito
t7 = t6 + 0; // Direccion return
t8 = stack[t7];// valor nueva cadena
heap[h] = 1408491350; // Fin cadena nueva
h = h + 1; 
t9 = h; 	//Posicion actual del h
heap[h] = 57;	//9
h = h + 1;
heap[h] = 97;	//a
h = h + 1;
heap[h] = 106;	//j
h = h + 1;
heap[h] = 97;	//a
h = h + 1;
heap[h] = 100;	//d
h = h + 1;
heap[h] = 102;	//f
h = h + 1;
heap[h] = 106;	//j
h = h + 1;
heap[h] = 97;	//a
h = h + 1;
heap[h] = 115;	//s
h = h + 1;
heap[h] = 108;	//l
h = h + 1;
heap[h] = 107;	//k
h = h + 1;
heap[h] = 1408491350;	// Fin de cadena
h = h + 1;
t11 = p + 2; // simulaci贸n de cambio de ambito
t12 = t11 + 1; // Direccion paso parametro cadena 1
stack[t12] = t8 ;// Pasando cadena 1
t13 = t11 + 2; // Direccion paso parametro cadena 2
stack[t13] = t9 ;// Pasando cadena 1
p = p + 2; // Cambio real de ambito
call concat ;
p = p - 2; // Cambio real de ambito
t14 = p + 2; // simulaci贸n de cambio de ambito
t15 = t14 + 0; // Direccion return
t16 = stack[t15];// valor nueva cadena
heap[h] = 1408491350; // Fin cadena nueva
h = h + 1; 
t17 = p + 2; // Simulacion de cambio de ambito
t18 = t17 + 0 ; // Posicion inicio de cadena
stack[t18] = t16;// Paso por referencia del inicio de cadena
t19 = t17 + 1 ; // Posicion flag modo impresion
stack[t19] = 0 ;// Paso por referencia del inicio de cadena
p = p + 2; // Cambio real de ambito
call impresionNativa ;  // Llamando funcion
p = p - 2; // Retomar ambito
$$_clean_scope (t17 , 2 ) ;// Limpiando stack
proc impresionNativa begin
t20= p  + 0 ;
t21= stack[t20];
t22= p + 1 ;
t23= stack[t22];
if (t23== 0 ) goto L0;// Imprimir en modo %c caracter
goto L1;
L1: 
if (t23== 1) goto L2;// Imprimir en modo %e entero
goto L3;
L3: 
if (t23== 2 ) goto L4;// Imprimir en modod %d decimal
goto L5;// Error
L0: 
t24 = heap[t21]; 
if ( t24 != 1408491350 ) goto L6;
goto L7;
L6: 
print( "%c" ,t24 ); 
t21 = t21+ 1; 
goto L0;
L2: 
print( "%e" , t21 ); 
goto L7;
L4: 
print( "%d" , t21 ); 
goto L8;
L5:L6:L7:L8:
t25= 10 ;
print( "%c" , t25 ); 
end
//metodo 3D que concatena 2 cadenas
proc concat begin 
t26=p+1; //cadena1
t27=stack[t26]; //puntero al heap
t28=h; //nueva cadena
L9:
t29=heap[t27]; //extrayendo caracter
if(t29!=1408491350) goto L10;
goto L11;
L10:
heap[h]=t29; //almacenando caracter
h=h+1;
t27=t27+1;
goto L9;
L11:
t30=p+2; //cadena2
t31=stack[t30]; //puntero al heap
L12:
t32=heap[t31]; //extrayendo caracter
if(t32!=1408491350) goto L13;
goto L14;
L13:
heap[h]=t32; //almacenando caracter
h=h+1;
t31=t31+1;
goto L12;
L14:
heap[h]=0;
h=h+1;
t33=p+0; //return del metodo
stack[t33]=t28;
end
