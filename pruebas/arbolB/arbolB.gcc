importar("ruta\pagina.gcc");

clase arbolB{
    pagina raiz;
    arbolB()
    {
        raiz=nada;
    }

    entero nodoLLeno(pagina actual)
    {
        si(actual == nada)
        si_verdadero
        {
            retorno 0;
        }
        si_falso
        {
            si(actual.cuenta == 4)
            si_verdadero
            {
                retorno 1;
            }
            si_falso
            {
                retorno 0;
            }
            fin-si
        }
        fi-sin
    }

    entero buscarNodo(pagina puntero actual, entero id_noticia, entero k)
    {
        si(id_noticia< actual.noticias[1].id_noticia)
        si_verdadero
        {
            k= 0;
            retornar 0;
        }
        si_falso
        {
            k=0;
            entero contador = 0;
            Repetir_contando (variable: contador; desde: 1; hasta: actual.cuenta) 
            {
                si(actual.noticias.id_noticia == id_noticia)
                si_verdadero
                {
                    k = k +1;
                    retorno 1;
                }
                fin-si
                k = k +1;
            }
            retorno 0;
        }
        fin-si
    }

    pagina buscar(pagina actual, entero id_noticia, entero indice)
    {
        si(actual == nada)
        si_verdadero
        {
            retorno nada;
        }
        si_falso
        {
            entero esta;
            esta = buscarNodo(actual, id_noticia, indice);
            si(esta == 1)
            si_verdadero
            {
                retorno actual;
            }
            si_falso
            {
                retorno buscar(actual.ramas[indice], id_noticia, indice);
            }
            fin-si
        }
        fin-si
    }

    vacio meterHoja(pagina actual, nodoB noticia, pagina rd, entero k)
    {
        entero i;
        Repetir_contando(variable:i; desde: ; hasta:)
        {

        }
    }
        void meterHoja(pagina*actual,nodoB *noticia,pagina*rd,int k){
            int i;
            for(i=actual->cuenta;i>=k+1;i--){
                actual->noticias[i+1]=actual->noticias[i];
                actual->ramas[i+1]=actual->ramas[i];
            }
            actual->noticias[k+1]=noticia;
            actual->ramas[i+1]=rd;
            actual->cuenta++;
        }

        void dividirNodo(pagina* actual,nodoB *noticia,pagina* rd,int k, nodoB **mediana,pagina** nuevo){
            int i,posMdna;
            posMdna = (k<=5/2)? 5/2: 5/2+1;
            (*nuevo)=(pagina*) malloc(sizeof(pagina));
            for (i=posMdna+1; i<5;i++){
                (*nuevo)->noticias[i-posMdna]=actual->noticias[i];
                (*nuevo)->ramas[i-posMdna]=actual->ramas[i];
            }
            (*nuevo)->cuenta=(4)-posMdna;
            actual->cuenta=posMdna;

            if(k<=3){
                meterHoja(actual,noticia,rd,k);

            }
            else
                meterHoja(*nuevo,noticia,rd,k-posMdna);

             *mediana=actual->noticias[3];
            (*nuevo)->ramas[0]=actual->ramas[actual->cuenta];
            actual->cuenta--;

        }


        void empujar(pagina *actual,nodoB *noticia,int *subeArriba,nodoB **mediana,pagina**nuevo){
            int k;
            if(actual==NULL){
                *subeArriba=1;
                *mediana=noticia;
                *nuevo=NULL;
            }
            else{
                int esta;
                esta=buscarNodo(actual,noticia->id_noticia,&k);

                if(esta){
                    *subeArriba=0;
                    qDebug()<<"Ya existe";
                    return;
                }

                empujar(actual->ramas[k],noticia,subeArriba,mediana,nuevo);
                if(*subeArriba){

                    qDebug()<<nodoLLeno(actual);
                  if(nodoLLeno(actual)){

                      dividirNodo(actual,noticia,*nuevo,k,mediana,nuevo);

                  }
                  else{

                      *subeArriba=0;
                      meterHoja(actual,*mediana,*nuevo,k);
                        ordenar(actual);

                  }

                }
            }
        }



        void ordenar(pagina *actual){
            int cont =0;
            while(cont!=3){
            for(int i=1;i<=actual->cuenta+1;i++){
                if(i+1<=actual->cuenta){
                if(actual->noticias[i]->id_noticia>actual->noticias[i+1]->id_noticia){
                    nodoB *aux = actual->noticias[i];
                    actual->noticias[i]=actual->noticias[i+1];
                    actual->noticias[i+1]=aux;

                }
                }
            }
            cont+=1;
            }
        }

        void insertar(pagina**raiz,nodoB *noticia){
            int subeArriba;
            nodoB *mediana;
            pagina *p,*nd;
            empujar(*raiz,noticia,&subeArriba,&mediana,&nd);
            if(subeArriba){
                qDebug()<<"subio una hoja";
                qDebug()<<mediana->id_noticia;
                p=(pagina*) malloc(sizeof(pagina));
                p->cuenta=1;
                p->noticias[1]=mediana;
                p->ramas[0]=*raiz;
                p->ramas[1]=nd;
                *raiz=p;
            }
        }




        void combina(pagina* actual, int k){

            int j;
            pagina *nodoIzqdo, *q;


            q = actual->ramas[k];
            nodoIzqdo = actual->ramas[k-1];

            nodoIzqdo->cuenta++;
            nodoIzqdo->noticias[nodoIzqdo->cuenta] = actual->noticias[k];
            nodoIzqdo->ramas[nodoIzqdo->cuenta] = q->ramas[0];

            for(j = 1; j <= q->cuenta; j++)
            {
                nodoIzqdo->cuenta++;
                nodoIzqdo->noticias[nodoIzqdo->cuenta] = q->noticias[j];
                nodoIzqdo->ramas[nodoIzqdo->cuenta] = q->ramas[j];
            }

            for(j = k; j <= actual->cuenta-1;j++){

                actual->noticias[j] = actual->noticias[j+1];
                actual->ramas[j] = actual->ramas[j+1];

            }
            actual->cuenta--;
            free(q);

        }


        void mover_derecha(pagina* actual, int k){

            int j;
            pagina* nodoProblema = actual->ramas[k];
            pagina* nodoIzqdo = actual->ramas[k-1];

            for(j = nodoProblema->cuenta; j >= 1; j--){

                nodoProblema->noticias[j+1] = nodoProblema->noticias[j];
                nodoProblema->ramas[j+1] = nodoProblema->ramas[j];
            }

            nodoProblema->cuenta++;
            nodoProblema->ramas[1] = nodoProblema->ramas[0];

            nodoProblema->noticias[1] = actual->noticias[k];


            actual->noticias[k] = nodoIzqdo->noticias[nodoIzqdo->cuenta];
            nodoProblema->ramas[0] = nodoIzqdo->ramas[nodoIzqdo->cuenta];
            nodoIzqdo->cuenta--;
        }


        void moverIzqda(pagina* actual, int k ){

            int j;

            pagina* nodoProblema = actual->ramas[k-1];
            pagina* nodoDrcho = actual->ramas[k];

            nodoProblema->cuenta++;
            nodoProblema->noticias[nodoProblema->cuenta] = actual->noticias[k];
            nodoProblema->ramas[nodoProblema->cuenta] = nodoDrcho->ramas[0];

            actual->noticias[k] = nodoDrcho->noticias[1];
            nodoDrcho->ramas[1] = nodoDrcho->ramas[0];
            nodoDrcho->cuenta--;

            for(j = 1; j <= nodoDrcho->cuenta; j++){

                nodoDrcho->noticias[j] = nodoDrcho->noticias[j+1];
                nodoDrcho->ramas[j] = nodoDrcho->ramas[j+1];

            }

        }


        void restablecer(pagina* actual, int k){

            if(k > 0)

                if(actual->ramas[k-1]->cuenta > 5/2)
                 mover_derecha(actual,k);

                else
                  combina(actual,k);
            else

              if(actual->ramas[1]->cuenta > 5/2)
                moverIzqda(actual, 1);
              else
                combina(actual,1);
        }


        void quitar(pagina* actual, int k){

            int j;

            for(j = k+1; j <= actual->cuenta; j++){

                actual->noticias[j-1] = actual->noticias[j];
                actual -> ramas[j-1] = actual->ramas[j];

            }
            actual->cuenta--;

        }


        void sucesor(pagina* actual, int k){

            pagina* q;

            q = actual->ramas[k];
            while(q->ramas[0] != NULL)
            q = q->ramas[0];

         actual->noticias[k] = q->noticias[1];

        }


        void eliminarRegistro(pagina* actual, nodoB * cl, int* encontrado){


           int k;

           if(actual != NULL)
            {

               *encontrado = buscarNodo(actual,cl->id_noticia, &k);
               if(*encontrado)
               {
                   if(actual->ramas[k-1] != NULL){

                       sucesor(actual,k);

                       eliminarRegistro(actual->ramas[k],actual->noticias[k],
                                                                  encontrado);
                   }
                   else{
                       quitar(actual,k);
                   }
               }else{
                   eliminarRegistro(actual->ramas[k],cl,encontrado);
               }


               if(actual->ramas[k] != NULL)
                  if(actual->ramas[k]->cuenta < 5/2)
                  restablecer(actual,k);
           }

           else
               encontrado =0;

        }


        bool eliminar(pagina** raiz, nodoB * cl){


            int encontrado;

            eliminarRegistro(*raiz,cl,&encontrado);


            if(encontrado)
            {

               cout << "Eliminamos la clave "<< cl->id_noticia<<endl;

               if((*raiz)->cuenta == 0)
               {

                  pagina* p = *raiz;
                  *raiz = (*raiz) ->ramas[0];
                  free(p);
               }
               return true;

            }

            else
                cout << "No esta esa clave"<<endl;
                return false;
        }





        bool modificar(pagina** actual, int id, int* encontrado,QString titulo,QString desc){

            pagina *aux =buscar(*actual,id,encontrado);
            if(aux!=NULL){
             aux->noticias[*encontrado]->titulo=titulo;
             aux->noticias[*encontrado]->cuerpo=desc;
             return true;
            }
            else{
                return false;
            }

        }


        QString goNot(pagina** actual, int id, int* encontrado){

            pagina *aux =buscar(*actual,id,encontrado);
            if(aux!=NULL){

             return aux->noticias[*encontrado]->cuerpo;
            }
            else{
             return "";
            }

        }

};