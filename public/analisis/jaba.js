/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var jaba = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,7],$V2=[1,10],$V3=[1,11],$V4=[1,12],$V5=[1,13],$V6=[1,14],$V7=[5,10,16,18,19,20,21,22],$V8=[1,27],$V9=[1,21],$Va=[1,22],$Vb=[1,23],$Vc=[1,24],$Vd=[1,25],$Ve=[1,26],$Vf=[1,31],$Vg=[13,14,23];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"LINSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"ASIGNACION":7,"DECLARACION":8,"IMPRESION":9,"println":10,"(":11,"EXP":12,")":13,";":14,"TIPO":15,"id":16,"=":17,"int":18,"double":19,"string":20,"boolean":21,"char":22,"+":23,"entero":24,"decimal":25,"texto":26,"textosimple":27,"verdadero":28,"falso":29,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"println",11:"(",13:")",14:";",16:"id",17:"=",18:"int",19:"double",20:"string",21:"boolean",22:"char",23:"+",24:"entero",25:"decimal",26:"texto",27:"textosimple",28:"verdadero",29:"falso"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[9,5],[8,5],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[7,4],[12,3],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
   
        return compilar($$[$0-1]);
    
break;
case 2:
 this.$ =$$[$0-1] ; this.$.push($$[$0]);
break;
case 3:
 this.$ = []; this.$.push($$[$0]);
break;
case 4: case 5: case 6:
this.$=$$[$0];
break;
case 7:

        this.$ = new Impresion(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-2]);
    
break;
case 8:

        this.$ = new Declaracion(_$[$0-4].first_line,_$[$0-4].first_column,$$[$0-4],$$[$0-3],$$[$0-1]);
        //function(linea, columna, tipo, id, exp)
    
break;
case 9: case 10: case 11: case 12: case 13: case 14:
this.$=$$[$0]
break;
case 15:

        //lista3D.push("asignacion");
        this.$ = new  Asignacion(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-3], $$[$0-1]);
    
break;
case 16:

			this.$ = new Suma(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
		
break;
case 17:
 
			this.$ = new ExpInt(_$[$0].first_line, _$[$0].first_column, $$[$0]);
        
break;
case 18:
 
			this.$ = new Expdecimal(_$[$0].first_line, _$[$0].first_column, $$[$0]);
        
break;
case 19:
            
            this.$ = new ExpString(_$[$0].first_line, _$[$0].first_column, $$[$0].substring(1,$$[$0].length-1));
        
break;
case 20:

            this.$ = new ExpChar(_$[$0].first_line, _$[$0].first_column, $$[$0][1]);
        
break;
case 21:

            this.$ = new ExpBoolean(_$[$0].first_line, _$[$0].first_column, 1);
        
break;
case 22:

            this.$ = new ExpBoolean(_$[$0].first_line, _$[$0].first_column, 0);
        
break;
case 23:

        this.$ = new ExpId(_$[$0].first_line, _$[$0].first_column, $$[$0]);
    
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:$V0,15:8,16:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6},{1:[3]},{5:[1,15],6:16,7:4,8:5,9:6,10:$V0,15:8,16:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6},o($V7,[2,3]),o($V7,[2,4]),o($V7,[2,5]),o($V7,[2,6]),{16:[2,14],17:[1,17]},{16:[1,18]},{11:[1,19]},{16:[2,9]},{16:[2,10]},{16:[2,11]},{16:[2,12]},{16:[2,13]},{1:[2,1]},o($V7,[2,2]),{12:20,16:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve},{17:[1,28]},{12:29,16:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve},{14:[1,30],23:$Vf},o($Vg,[2,17]),o($Vg,[2,18]),o($Vg,[2,19]),o($Vg,[2,20]),o($Vg,[2,21]),o($Vg,[2,22]),o($Vg,[2,23]),{12:32,16:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve},{13:[1,33],23:$Vf},o($V7,[2,15]),{12:34,16:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve},{14:[1,35],23:$Vf},{14:[1,36]},o($Vg,[2,16]),o($V7,[2,8]),o($V7,[2,7])],
defaultActions: {10:[2,9],11:[2,10],12:[2,11],13:[2,12],14:[2,13],15:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

var codigoHash=0;
var contTemporales = 0;
var contEtiquetas = 0;
var listaErrores = [];
var lista3D = [];
var p = 0;
var h = 0;
var nulo = 201213050*7;
var fs = require('fs');




function compilar(raiz)
{
    var entornoGlobal = new Entorno(null);    
    iniciarVariables();    
    raiz.forEach(element => 
    {
            element.generarCodigo(entornoGlobal);
    });
    /*Generar nativas */
    generarNativas();    
    var stream = fs.createWriteStream("entrada3d.txt");
    console.log("-----------Codigo 3D---------------");           
    stream.once('open', function(fd) 
    {
        lista3D.forEach(sts =>
        {            
            stream.write(sts+"\n");
        });                     
        stream.end();
    });     
     
   

    console.log("-----------Errores---------------");
    /*Errores*/
    listaErrores.forEach(ierror =>
    {
        console.log(ierror);
    });    
    var resultados = [];
    resultados.push(lista3D);
    resultados.push(listaErrores);
    return resultados;
}

function generarNativas()
{    
    nativaImprimir();
    nativaConcatenar();
}

function iniciarVariables()
{
    lista3D.push("var p = 0;");
    lista3D.push("var h = 0;");
    lista3D.push("var stack [];");
    lista3D.push("var heap [];");    
}

function nativaConcatenar()/*Concatena dos cadenas */
{
    var temp1=generarTemporal();
    var temp2=generarTemporal();
    var temp4=generarTemporal();
    var eti1=generarEtiqueta();
    var temp5=generarTemporal();
	var eti2=generarEtiqueta();
    var eti3=generarEtiqueta();
    var temp6=generarTemporal();
    var temp7=generarTemporal();
    var eti4=generarEtiqueta();
    var eti5=generarEtiqueta();
	var eti6=generarEtiqueta();
    var temp9=generarTemporal();
    var temp10=generarTemporal();    
	lista3D.push("//metodo 3D que concatena 2 cadenas");
	lista3D.push("proc concat begin ");
	lista3D.push(temp1+"=p+1; //cadena1");    
	lista3D.push(temp2+"=stack["+temp1+"]; //puntero al heap");    
    lista3D.push(temp4+"=h; //nueva cadena");        
	lista3D.push(eti1+":");    
	lista3D.push(temp5+"=heap["+temp2+"]; //extrayendo caracter");    
	lista3D.push("if("+temp5+"!="+nulo+") goto "+eti2+";");
	lista3D.push("goto "+eti3+";");
	lista3D.push(eti2+":");
	lista3D.push("heap[h]="+temp5+"; //almacenando caracter");
	lista3D.push("h=h+1;");
	lista3D.push(temp2+"="+temp2+"+1;");
	lista3D.push("goto "+eti1+";");
	lista3D.push(eti3+":");    
	lista3D.push(temp6+"=p+2; //cadena2");    
	lista3D.push(temp7+"=stack["+temp6+"]; //puntero al heap");
	lista3D.push(eti4+":");	
	lista3D.push(temp9+"=heap["+temp7+"]; //extrayendo caracter");
	lista3D.push("if("+temp9+"!="+nulo+") goto "+eti5+";");
	lista3D.push("goto "+eti6+";");
	lista3D.push(eti5+":");
	lista3D.push("heap[h]="+temp9+"; //almacenando caracter");
	lista3D.push("h=h+1;");
	lista3D.push(temp7+"="+temp7+"+1;");
	lista3D.push("goto "+eti4+";");
	lista3D.push(eti6+":");
	lista3D.push("heap[h]=0;");
	lista3D.push("h=h+1;");
	lista3D.push(temp10+"=p+0; //return del metodo");
	lista3D.push("stack["+temp10+"]="+temp4+";");
	lista3D.push("end");

}

function nativaImprimir()
{
    var t1 = generarTemporal();
    var t2 = generarTemporal();    
    var t3 = generarTemporal();
    var t4 = generarTemporal();
    var t5 = generarTemporal();
    var t6 = generarTemporal();          
    var L1 = generarEtiqueta();
    var L2 = generarEtiqueta();       
    var L3 = generarEtiqueta();
    var L4 = generarEtiqueta();
    var L5 = generarEtiqueta();
    var L6 = generarEtiqueta();       
    var L7 = generarEtiqueta();
    var L8 = generarEtiqueta();    
    var L10 = generarEtiqueta();   
    lista3D.push("proc impresionNativa begin");
    lista3D.push(t1 +"= p  + 0 ;");
    lista3D.push(t2 +"= stack["+t1+"];");
    lista3D.push(t3 +"= p + 1 ;");
    lista3D.push(t4 +"= stack["+t3+"];");
    lista3D.push("if ("+ t4 +"== 0 ) goto "+ L1 +";// Imprimir en modo %c caracter");
    lista3D.push("goto "+ L2+";" );
    lista3D.push(L2+": ");
    lista3D.push("if ("+ t4 +"== 1) goto "+L3 +";// Imprimir en modo %e entero");
    lista3D.push("goto "+L4 +";");
    lista3D.push(L4+": ");
    lista3D.push("if ("+t4 +"== 2 ) goto "+L5 +";// Imprimir en modod %d decimal");
    lista3D.push("goto "+L6 +";// Error");
    lista3D.push(L1+": ");
    lista3D.push(t5+" = heap["+t2+"]; ");
    lista3D.push("if ( "+t5+" != "+nulo+" ) goto "+L7 +";");
    lista3D.push("goto "+L8+";");
    lista3D.push(L7+": ");
    lista3D.push("print( \"%c\" ,"+ t5+" ); ");
    lista3D.push(t2+" = "+t2 +"+ 1; ");
    lista3D.push("goto "+L1+ ";");
    lista3D.push(L3+": ");
    lista3D.push("print( \"%e\" , "+t2+" ); ");
    lista3D.push("goto "+L8+";");
    lista3D.push(L5+": ");
    lista3D.push("print( \"%d\" , "+t2+" ); ");
    lista3D.push("goto "+L10+";");
    lista3D.push(L6+":"+L7+":"+L8+":"+L10+":");
    lista3D.push(t6 +"= 10 ;");
    lista3D.push("print( \"%c\" , "+t6+" ); ");
    lista3D.push("end");
}


function coreGetStr(){
    //----------------------------------------------
        var tempExt=generarTemporal();
        var eti12=generarEtiqueta();
        var eti13=generarEtiqueta();
    
        var etiSalida=generarEtiqueta();
    //----------------------------------------------
        lista3D.push("proc getStr begin");
    
        var temp1=generarTemporal();
        var temp2=generarTemporal();
        lista3D.push(temp1+"=p+1;");
        lista3D.push(temp2+"=stack["+temp1+"]; //numero a convertir");
    
        var eti1=generarEtiqueta();
        //-----------------------------------------------------------si es 0
        lista3D.push("if("+temp2+"==0) goto "+eti12+";");
        lista3D.push("goto "+eti1+";");
    
        lista3D.push(eti12+":");
        lista3D.push(tempExt+"=h;");
        lista3D.push("heap[h]=48;");
        lista3D.push("h  = h + 1;");
        lista3D.push("goto "+eti13+";");
        //-----------------------------------------------------------------------
    
        
        lista3D.push(eti1+":");
    
        var temp3=generarTemporal();
        lista3D.push(temp3+"=p+2; //simulacion de cambio de ambito");
    
        var temp4=generarTemporal();
        lista3D.push(temp4+"="+temp3+"+1; //parametro del metodo getInt");
        lista3D.push("stack["+temp4+"]="+temp2+";");
    
        lista3D.push("p=p+2; //cambio de ambito real");
        lista3D.push("call getInt();");
    
        var temp5=generarTemporal();
        lista3D.push(temp5+"=p+0; //acceso al return del metodo getInt");
    
        var temp6=generarTemporal();
        lista3D.push(temp6+"=stack["+temp5+"]; //parte entera");
        lista3D.push("p=p-2;  //regreso al metodo getStr");
    
        var eti2=generarEtiqueta();
        var eti3=generarEtiqueta();
        lista3D.push("if("+temp6+">0) goto "+eti2+";");
        lista3D.push("goto "+eti3+";");
    
        lista3D.push(eti2+":");
    
        var temp7=generarTemporal();
        lista3D.push(temp7+"="+temp6+"%10; //extrayendo digito");
        temp6=generarTemporal();
        lista3D.push(temp6+"="+temp7+"+48;");
        lista3D.push("heap[h]="+temp6+"; //agregando digito al heap");
        lista3D.push("h  = h + 1;");
    
        lista3D.push(temp2+"="+temp2+"/10;");
        lista3D.push("goto "+eti1+";");
    
        lista3D.push(eti3+":");
    
        //agregando caracter de fin de cadena
        lista3D.push("heap[h]=0; //caracter de finde cadena");
        var temp8=generarTemporal();
        lista3D.push(temp8+"=h; //parte entera al revez");//**************************************
        lista3D.push("h  = h + 1;");
    
    
        //parte decimal
        temp2=generarTemporal();
        lista3D.push(temp2+"=stack["+temp1+"]; //numero a convertir");
    
    //--
    
        temp3=generarTemporal();
        lista3D.push(temp3+"=p+2; //simulacion de cambio de ambito");
    
        temp4=generarTemporal();
        lista3D.push(temp4+"="+temp3+"+1; //parametro del metodo getInt");
        lista3D.push("stack["+temp4+"]="+temp2+";");
    
        lista3D.push("p=p+2; //cambio de ambito real");
        lista3D.push("call getInt();");
    
        temp5=generarTemporal();
        lista3D.push(temp5+"=p+0; //acceso al return del metodo getInt");
    
        temp6=generarTemporal();
        lista3D.push(temp6+"=stack["+temp5+"]; //parte entera");
        lista3D.push("p=p-2;  //regreso al metodo getStr");
    
    
            //obteniendo parte decimal
        var temp22=generarTemporal();
        lista3D.push(temp22+"="+temp2+"*"+temp2+";");
        var temp23=generarTemporal();
        lista3D.push(temp23+"=1.0/2.0;");
    
        var temp24=generarTemporal();
        var tempI = generarTemporal();
        var etiquetaI = generarEtiqueta();
        lista3D.push(tmpI +" = 0 ; // Inicio");
        lista3D.push(temp24+"="+temp22+"^"+temp23+";");
        lista3D.push("if ( " +tmpI +" != "+temp23+") goto " + etiquetaI +";");        
        var temp9=generarTemporal();
        lista3D.push(temp9+"="+temp24+"-"+temp6+"; // decimal");
        
        var temp10=generarTemporal();
        lista3D.push(temp10+"="+temp9+"^2;");
    
        var temp11=generarTemporal();
        lista3D.push(temp11+"="+temp10+"^"+temp23+";");
    
        var temp12=generarTemporal();
        lista3D.push(temp12+"="+temp11+"*10000;");
    
    
        var eti4=generarEtiqueta()
        var eti5=generarEtiqueta();
    
        lista3D.push("if("+temp12+"!=0) goto "+eti4+"; //si contiene parte decimal");
        lista3D.push("goto "+eti5+"; //si no contiene parte decimal");
    
        lista3D.push(eti4+":");
    
        
        temp3=generarTemporal();
        lista3D.push(temp3+"=p+2; //simulacion de cambio de ambito");
    
        temp4=generarTemporal();
        lista3D.push(temp4+"="+temp3+"+1; //parametro del metodo getInt");
        lista3D.push("stack["+temp4+"]="+temp12+";");
    
        lista3D.push("p=p+2; //cambio de ambito real");
        lista3D.push("getInt();");
    
        temp5=generarTemporal();
        lista3D.push(temp5+"=p+0; //acceso al return del metodo getInt");
    
        temp6=generarTemporal();
        lista3D.push(temp6+"=stack["+temp5+"]; //parte entera");
        lista3D.push("p=p-2;  //regreso al metodo getStr");
    
    
    
    
        eti2=generarEtiqueta();
        eti3=generarEtiqueta();
        lista3D.push("if("+temp6+">0) goto "+eti2+";");
        lista3D.push("goto "+eti3+";");
    
        lista3D.push(eti2+":");
    
        temp7=generarTemporal();
        var temp89=generarTemporal();
        lista3D.push(temp7+"="+temp6+"%10; //extrayendo digito");
        lista3D.push(temp89+"="+temp7+"+48; //ascci del digito");
        lista3D.push("heap[h]="+temp89+"; //agregando digito al heap");
        lista3D.push("h  = h + 1;");
    
        lista3D.push(temp12+"="+temp12+"/10;");
        lista3D.push("goto "+eti4+";");
    
        lista3D.push(eti3+":");
            var temp13=generarTemporal();
            lista3D.push(temp13+"=46; //simbolo de decimal . ");
            lista3D.push("heap[h]="+temp13+";");
            lista3D.push("h  = h + 1;");
    
    
        lista3D.push(eti5+":");
        var temp88=generarTemporal();
        lista3D.push(temp88+"=s; //parte decimal");
    
        lista3D.push("heap[h]=0;");
        lista3D.push("h  = h + 1;");
    
        var temp13=generarTemporal();
    
        lista3D.push(temp13+"=s; //cadena convertida");
    
        var temp14=generarTemporal();
        lista3D.push(temp14+"=stack["+temp1+"];");
    
        var eti6=generarEtiqueta();
        var eti7=generarEtiqueta();
    
        lista3D.push("if("+temp14+"<0) goto "+eti6+"; //si en numero a convertir es negativo");
        lista3D.push("goto "+eti7+";");
    //--------------------------------------
        lista3D.push(eti6+":");
        var temp15=generarTemporal();
        lista3D.push(temp15+"=45;");
        lista3D.push("heap[h]="+temp15+";");
        lista3D.push("h  = h + 1;");
        
        lista3D.push(eti7+":");
        lista3D.push(temp8+"="+temp8+"-1;");
        var temp16=generarTemporal();
        lista3D.push(temp16+"=heap["+temp8+"];");
    
        var eti8=generarEtiqueta();
        var eti9=generarEtiqueta();
        lista3D.push("if("+temp16+"!=0) goto "+eti8+";");
        lista3D.push("goto "+eti9+";");
    
        lista3D.push(eti8+":");
        lista3D.push("heap[h]="+temp16+";");
        lista3D.push("h  = h + 1;");
        lista3D.push("goto "+eti7+";");
    
    
    //decimal
        lista3D.push(eti9+":");
    
        lista3D.push(temp88+"="+temp88+"-1;");
        var temp17=generarTemporal();
        lista3D.push(temp17+"=heap["+temp88+"];");
    
        var eti10=generarEtiqueta();
        var eti11=generarEtiqueta();
        lista3D.push("if("+temp17+"!=0) goto "+eti10+";");
        lista3D.push("goto "+eti11+";");
    
        lista3D.push(eti10+":");
        lista3D.push("heap[h]="+temp17+";");
        lista3D.push("h  = h + 1;");
        lista3D.push("goto "+eti9+";");
    
        lista3D.push(eti11+":");
        var temp18=generarTemporal();
        lista3D.push("heap[h]=0;");
        lista3D.push("h  = h + 1;");
    
        lista3D.push(temp18+"=p+0; //retorno");
        lista3D.push("stack["+temp18+"]="+temp13+";");
    
        lista3D.push("goto "+etiSalida+";");
    
        //si el valor a convertir es 0
        lista3D.push(eti13+":");
        temp18=generarTemporal();
        lista3D.push("heap[h]=0;");
        lista3D.push("h  = h + 1;");
    
        lista3D.push(temp18+"=p+0; //retorno");
        lista3D.push("stack["+temp18+"]="+tempExt+";");
    
        lista3D.push(etiSalida+":  ;");
    
        lista3D.push("}\n");
    
    }
    


var Simbolo = function(linea, columna, id, tipo, rol, valor)
{
    var self = this;
    self.linea = linea;
    self.columna = columna;
    self.id = id.toLowerCase();
    self.tipo = tipo.toLowerCase();
    self.rol = rol;
    self.valor = valor;  
    self.posicion = 0;      
};

var Resultado = function(linea, columna, valor, referencia, tipo)
{
    var self = this;
    self.linea = linea;
    self.columna = columna;
    self.valor = valor;
    self.referencia = referencia;
    self.tipo = tipo;
    self.flag = 0; /*0 es valor, 1 es referencia */
};


var Entorno = function(anterior)
{   
    var self = this;
    self.anterior = anterior;
    self.tablaSimbolos = {};// :3
    self.contador = 2;

    self.addSimbolo = function(simbolo)
    {        
        if(self.tablaSimbolos[simbolo.id] == null)
        {
            simbolo.posicion = self.contador++;
            self.tablaSimbolos[simbolo.id] = simbolo;
        }    
        else
        {
            listaErrores.push("La variable "+simbolo.id +" ya existe en la tabla de símbolos");
        }
    };    
    
    self.buscarSimbolo = function(id)
    {
        var entornoActual = self;
        while(entornoActual !=null)
        {
            if(entornoActual.tablaSimbolos[id] != null)
            {                
                return entornoActual.tablaSimbolos[id];
            }    
            entornoActual = entornoActual.anterior;
        }        
        listaErrores.push("La variable "+id +" no existe en la tabla de símbolos");
        return null;
    };
};

function generarTemporal()
{
    return "t"+contTemporales++;
};

function generarEtiqueta()
{
    return "L"+contEtiquetas++;
};

function getCodigo()
{
    return "nodo"+(codigoHash++);
}

function reiniciar(){
    temp=1;
    codigoHash=0;
}

function crearNodo(etiqueta,linea,columna){
    var nodo=new Nodo(etiqueta,linea,columna+1);
    nodo.codigo=getCodigo();
    return nodo;
}

function crearHoja(etiqueta,valor,linea,columna){
    var nodo=new Nodo(etiqueta,linea,columna+1);
    nodo.valor=valor;
    nodo.codigo=getCodigo();
    return nodo;
}

class Nodo
{
    constructor(etiqueta,linea,columna)
    {
        this.etiqueta=etiqueta;
        this.valor=null;
        this.linea=linea;
        this.columna=columna;
        this.hijos=new Array();        
        this.add=function(nodo)
        {
            if(nodo!=null)
            {
                this.hijos.push(nodo);
            }
        }
    }
}


var Llamada = function(linea, columna, tipo, id, exp)
{   
    var self = this;
    self.linea = linea;
    self.columna = columna;
    self.tipo = tipo;
    self.id = id;
    self.expresion = exp;

    self.generarCodigo = function(entorno)
    {
        /*generamos codigo*/
    }    
};


var Declaracion = function(linea, columna, tipo, id, exp)
{   
    var self = this;
    self.linea = linea;
    self.columna = columna;
    self.tipo = tipo;
    self.id = id;
    self.expresion = exp;

    self.generarCodigo = function(entorno)
    {
        /*generamos codigo*/
        entorno.addSimbolo(new Simbolo(linea,columna,id,tipo));
        var simbolo = entorno.buscarSimbolo(self.id);
        var posicion = generarTemporal();
        lista3D.push(posicion + " = p + "+ simbolo.posicion + ";\t// Posicion relativa de la variable " + self.id);        
        var result = self.expresion.generarCodigo(entorno);   
        if(result !=null)
        {
            lista3D.push("stack["+posicion+"] = "+result.valor + ";\t// Asignandole el valor a la variable " +self.id);
            return;
        }        
        //listaErrores.push("Error");
        console.log("Error linea:\t "+self.linea +"\tcolumna:\t"+self.columna);
    }    
};


var Asignacion = function(linea, columna, id, exp)
{   
    var self = this;
    self.linea = linea;
    self.columna = columna;
    self.id = id ;
    self.expresion = exp;

    self.generarCodigo = function(entorno)
    {
        /*generamos codigo*/
        var simbolo = entorno.buscarSimbolo(self.id);
        if(simbolo !=null)
        {
            var temporal = generarTemporal();            
            lista3D.push(temporal + " = p + " + simbolo.posicion +"; // Posicion variable " + self.id);            
            var expresion = self.expresion.generarCodigo(entorno);    
            if(expresion!=null)
            {
                //console.log( expresion.tipo+ "=="+ simbolo.tipo);                
                if(expresion.tipo == simbolo.tipo)
                {
                    lista3D.push("stack["+temporal+"] = " +expresion.valor + ";\t// Asignandole el valor a la variable "+self.id);
                }
                else
                {         
                    //console.log("Error de tipos al tratar de asignar un valor " + expresion.tipo + ", se esperaba " + simbolo.tipo + " linea: "+ self.linea);       
                    listaErrores.push("Error de tipos al tratar de asignar un valor " + expresion.tipo + ", se esperaba " + simbolo.tipo + " linea: "+ self.linea);
                }
            }                            
        }
    }    
};



var Or = function(linea, columna, i, d)
{   
    var self = this;
    self.linea = linea;
    self.columna = columna;
    self.operandoI = i;
    self.operandoD = d;

    self.generarCodigo = function(entorno)
    {
        /*generamos codigo*/
    }    
};

var And = function(linea, columna, i, d)
{   
    var self = this;
    self.linea = linea;
    self.columna = columna;
    self.operandoI = i;
    self.operandoD = d;

    self.generarCodigo = function(entorno)
    {
        /*generamos codigo*/
    }    
};



var MenorIgual = function(linea, columna, i, d)
{   
    var self = this;
    self.linea = linea;
    self.columna = columna;
    self.operandoI = i;
    self.operandoD = d;

    self.generarCodigo = function(entorno)
    {
        /*generamos codigo*/
    }    
};



var MayorIgual = function(linea, columna, i, d)
{   
    var self = this;
    self.linea = linea;
    self.columna = columna;
    self.operandoI = i;
    self.operandoD = d;

    self.generarCodigo = function(entorno)
    {
        /*generamos codigo*/
    }    
};




var Diferente = function(linea, columna, i, d)
{   
    var self = this;
    self.linea = linea;
    self.columna = columna;
    self.operandoI = i;
    self.operandoD = d;

    self.generarCodigo = function(entorno)
    {
        /*generamos codigo*/
    }    
};



var Igual = function(linea, columna, i, d)
{   
    var self = this;
    self.linea = linea;
    self.columna = columna;
    self.operandoI = i;
    self.operandoD = d;

    self.generarCodigo = function(entorno)
    {
        /*generamos codigo*/
    }    
};



var Menor = function(linea, columna, i, d)
{   
    var self = this;
    self.linea = linea;
    self.columna = columna;
    self.operandoI = i;
    self.operandoD = d;

    self.generarCodigo = function(entorno)
    {
        /*generamos codigo*/
    }    
};



var Mayor = function(linea, columna, i, d)
{   
    var self = this;
    self.linea = linea;
    self.columna = columna;
    self.operandoI = i;
    self.operandoD = d;

    self.generarCodigo = function(entorno)
    {
        /*generamos codigo*/
    }    
};



var Modulo = function(linea, columna, i, d)
{   
    var self = this;
    self.linea = linea;
    self.columna = columna;
    self.operandoI = i;
    self.operandoD = d;

    self.generarCodigo = function(entorno)
    {
        /*generamos codigo*/
    }    
};



var Potencia = function(linea, columna, i, d)
{   
    var self = this;
    self.linea = linea;
    self.columna = columna;
    self.operandoI = i;
    self.operandoD = d;

    self.generarCodigo = function(entorno)
    {
        /*generamos codigo*/
    }    
};



var Multiplicacion = function(linea, columna, i, d)
{   
    var self = this;
    self.linea = linea;
    self.columna = columna;
    self.operandoI = i;
    self.operandoD = d;

    self.generarCodigo = function(entorno)
    {
        /*generamos codigo*/
    }    
};



var Division = function(linea, columna, i, d)
{   
    var self = this;
    self.linea = linea;
    self.columna = columna;
    self.operandoI = i;
    self.operandoD = d;

    self.generarCodigo = function(entorno)
    {
        /*generamos codigo*/
    }    
};


var Resta = function(linea, columna, i, d)
{   
    var self = this;
    self.linea = linea;
    self.columna = columna;
    self.operandoI = i;
    self.operandoD = d;

    self.generarCodigo = function(entorno)
    {
        /*generamos codigo*/
    }    
};

var Suma = function(linea, columna, i, d)
{   
    var self = this;
    self.linea = linea;
    self.columna = columna;
    self.operandoI = i;
    self.operandoD = d;

    self.generarCodigo = function(entorno)
    {
        var vali = self.operandoI.generarCodigo(entorno); // Resultado1
        var vald = self.operandoD.generarCodigo(entorno); // Resultado2        
        var etiqueta = generarTemporal();
        var resultado= null;
        switch(vali.tipo)
        {
            case "int":
                switch(vald.tipo)
                {
                    case "boolean":
                    case "int":
                        lista3D.push(etiqueta + " = " + vali.valor + " + " + vald.valor+";");
                        resultado = new Resultado(self.linea, self.columna, etiqueta, "", "int");
                    break;
                    case "double":
                        lista3D.push(etiqueta + " = " + vali.valor + " + " + vald.valor+";");
                        resultado = new Resultado(self.linea, self.columna, etiqueta, "", "double");
                    break;                    
                    default:                
                    listaErrores.push("Error de tipos " + vali.tipo+ " + "+vald.tipo+ " linea: "+linea + " columna: "+columna);
                    break;
                }
            break;
            case "string":
                switch(vald.tipo)
                {   
                    case "string":
                        var tmp2 = generarTemporal();
                        var tmp3 = generarTemporal();
                        var tmp4 = generarTemporal();
                        var tmp5 = generarTemporal();
                        var tmp6 = generarTemporal();
                        var tmp7 = generarTemporal();
                        lista3D.push(tmp2 +" = p + " + entorno.contador + "; // simulación de cambio de ambito");
                        lista3D.push(tmp3 +" = "+tmp2 +" + 1; // Direccion paso parametro cadena 1");
                        lista3D.push("stack["+tmp3+"] = "+vali.valor+" ;// Pasando cadena 1");
                        lista3D.push(tmp4 +" = "+tmp2 +" + 2; // Direccion paso parametro cadena 2");
                        lista3D.push("stack["+tmp4+"] = "+vald.valor+" ;// Pasando cadena 1");
                        lista3D.push("p = p + "+entorno.contador + "; // Cambio real de ambito");
                        lista3D.push("call concat ;");
                        lista3D.push("p = p - "+entorno.contador + "; // Cambio real de ambito");
                        lista3D.push(tmp5 + " = p + " + entorno.contador + "; // simulación de cambio de ambito");
                        lista3D.push(tmp6 + " = "+tmp5 +" + 0; // Direccion return");
                        lista3D.push(tmp7  + " = stack["+tmp6+"];// valor nueva cadena");
                        lista3D.push("heap[h] = " + nulo +"; // Fin cadena nueva");
                        lista3D.push("h = h + 1; ");
                        resultado = new Resultado(self.linea, self.columna, tmp7, "", "string");                        
                    break;
                }
            break;
        }        
        
        if(vali.flag == 0  && vald.flag ==0)
        {
            
        }                
        
        return resultado;
    }    
};

var ExpInt = function(linea, columna, v)
{   
    var self = this;
    self.linea = linea;
    self.columna = columna;
    self.valor = v;    

    function generar3d()
    {
        return self.valor;
    }

    self.generarCodigo = function(entorno)
    {                         
        var resultado = new Resultado(self.linea, self.columna, self.valor, "", "int");              
        return resultado;
    }    
};

var Expdecimal = function(linea, columna, v)
{   
    var self = this;
    self.linea = linea;
    self.columna = columna;
    self.valor = v;    
    
    self.generarCodigo = function(entorno)
    {                         
        var resultado = new Resultado(self.linea, self.columna, self.valor, "", "double");              
        return resultado;
    }   
};


var ExpString = function(linea, columna, v)
{   
    var self = this;
    self.linea = linea;
    self.columna = columna;
    self.valor = v;    

    self.generarCodigo = function(entorno)
    {           
        var tmp = generarTemporal();        
        lista3D.push(tmp + " = h; \t//Posicion actual del h")                             
        var i;
        for(i = 0 ; i < self.valor.length  ; i++)
        {                 
            lista3D.push("heap[h] = " +self.valor[i].charCodeAt(0) + ";\t//"+self.valor[i] );
            lista3D.push("h = h + 1;");                                     
        }
        lista3D.push("heap[h] = " +nulo + ";\t// Fin de cadena");
        lista3D.push("h = h + 1;"); 
        var resultado = new Resultado(self.linea, self.columna, tmp, "", "string");            
        return resultado;        
    }    
};


var ExpChar = function(linea, columna, v)
{   
    var self = this;
    self.linea = linea;
    self.columna = columna;
    self.valor = v.charCodeAt(0);    

    self.generarCodigo = function(entorno)
    {         
        var resultado = new Resultado(self.linea, self.columna, self.valor,  "", "char");        
        return resultado;
    }    
};

var ExpBoolean = function(linea, columna, v)
{   
    var self = this;
    self.linea = linea;
    self.columna = columna;
    self.valor = v;    

    self.generarCodigo = function(entorno)
    {                 
        var resultado = new Resultado(self.linea, self.columna, self.valor, "", "boolean");        
        return resultado;
    }    
};

var Impresion = function(linea, columna, v)
{
    var self = this;
    self.linea = linea;
    self.columna = columna;
    self.expresion = v;
    self.generarCodigo  = function(entorno)
    {
        var resultado = self.expresion.generarCodigo(entorno);
        var tmp1 = generarTemporal(); // Simulacion de cambio de ambito        
        var tmp2 = generarTemporal(); // Dirección de inicio de la cadena
        var tmp3 = generarTemporal(); // Dirección del parametro de tipo de impresión      
        lista3D.push(tmp1 + " = p + " +entorno.contador + "; // Simulacion de cambio de ambito");
        lista3D.push(tmp2 + " = "+  tmp1 + " + 0 ; // Posicion inicio de cadena");
        //console.log("Tipo del resultado --impresion " + resultado.tipo);
        if(resultado.tipo=="string")
        {
            lista3D.push("stack["+tmp2+"] = "+  resultado.valor + ";// Paso por referencia del inicio de cadena");
        }else
        //if(resultado.tipo==1)
        {
            lista3D.push("stack["+tmp2+"] = "+  resultado.referencia + ";// Paso por referencia del inicio de cadena");
        }                
        lista3D.push(tmp3 + " = "+  tmp1 + " + 1 ; // Posicion flag modo impresion");
        lista3D.push("stack["+tmp3+"] = "+resultado.flag+" ;// Paso por referencia del inicio de cadena");
        lista3D.push("p = p + "+entorno.contador +"; // Cambio real de ambito");
        lista3D.push("call impresionNativa ;  // Llamando funcion");
        lista3D.push("p = p - "+entorno.contador +"; // Retomar ambito");
        lista3D.push("$$_clean_scope (" + tmp1 +" , " + entorno.contador +" ) ;// Limpiando stack");
    }
};

var ExpId = function(linea, columna, id)
{
    var self = this;
    self.linea = linea;
    self.columna = columna;
    self.id = id;

    self.generarCodigo = function(entorno)
    {        
        var tmp1 = generarTemporal();
        var tmp2 = generarTemporal();
        var simbolo = entorno.buscarSimbolo(self.id);    
        console.log("Variable "+ simbolo.id + " encontarada");
        console.log("Variable tipo "+ simbolo.tipo + " encontarada");
        if(simbolo !=  null)
        {
            lista3D.push(tmp1 + " = p + "+ simbolo.posicion + "; // Posicion local "+id);
            lista3D.push(tmp2 + " = stack["+tmp1 +"] ; // Valor de "+id);
            //console.log(simbolo);        
            if(simbolo.tipo == "string")
            {
                var tmp3 = generarTemporal();
                lista3D.push(tmp3 + " = stack["+tmp2 +"] ; // Direccion en el heap");
                var resultado = new Resultado(self.linea, self.columna, tmp3, tmp2, 1);
                resultado.flag = 0;
                return resultado;        
            }
            else 
            if(simbolo.tipo == "int")
            {
                var resultado = new Resultado(self.linea, self.columna, tmp2, tmp1, 0);
                resultado.flag = 1;
                return resultado;        
            }
            else 
            if(simbolo.tipo == "double")
            {
                var resultado = new Resultado(self.linea, self.columna, tmp2, tmp1, 0);
                resultado.flag = 2;
                return resultado;        
            }  
            else
            if(simbolo.tipo == "boolean")
            {
                var resultado = new Resultado(self.linea, self.columna, tmp2, tmp1, 0);
                resultado.flag = 2;
                return resultado;        
            }
        }
        console.log("No se ha encontrado la variable "+ self.id);
              
    }
};


	/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip whitespace */
break;
case 2:/* skip whitespace */
break;
case 3:return;
break;
case 4:return;
break;
case 5:return;
break;
case 6:return 25
break;
case 7:return 24
break;
case 8:return 26
break;
case 9:return 27
break;
case 10: /*lista3D.push('++');*/return '++'; 
break;
case 11: /*lista3D.push('--');*/return '--'; 
break;
case 12: /*lista3D.push('+=');*/return '+='; 
break;
case 13: /*lista3D.push('*-');*/return '*-'; 
break;
case 14: /*lista3D.push('-=');*/return '-='; 
break;
case 15: /*lista3D.push('/=k');*/return '/='; 
break;
case 16: /*lista3D.push('>=');*/return '>='; 
break;
case 17: /*lista3D.push('<=');*/return '<='; 
break;
case 18: /*lista3D.push('==');*/return '=='; 
break;
case 19: /*lista3D.push('!=');*/return '!='; 
break;
case 20: /*lista3D.push('||');*/return '||'; 
break;
case 21: /*lista3D.push('??');*/return '??'; 
break;
case 22: /*lista3D.push('&&');*/return '&&'; 
break;
case 23: /*lista3D.push('!');*/return '!'; 
break;
case 24: /*lista3D.push('*');*/return '*'; 
break;
case 25: /*lista3D.push('->');*/return 'flecha'; 
break;
case 26: /*lista3D.push('/');*/return '/'; 
break;
case 27: /*lista3D.push('-');*/return '-'; 
break;
case 28: /*lista3D.push('+');*/return 23; 
break;
case 29: /*lista3D.push('+');*/return '%'; 
break;
case 30: /*lista3D.push('^');*/return '^'; 
break;
case 31: /*lista3D.push('=');*/return 17; 
break;
case 32: /*lista3D.push('(');*/return 11; 
break;
case 33: /*lista3D.push(')');*/return 13; 
break;
case 34: /*lista3D.push('{');*/return '{'; 
break;
case 35: /*lista3D.push('}');*/return '}'; 
break;
case 36: /*lista3D.push('[');*/return '['; 
break;
case 37: /*lista3D.push(']');*/return ']'; 
break;
case 38: /*lista3D.push('>');*/return '>'; 
break;
case 39: /*lista3D.push('<');*/return '<'; 
break;
case 40: /*lista3D.push(',');*/return ','; 
break;
case 41: /*lista3D.push('.');*/return '.'; 
break;
case 42: /*lista3D.push(':');*/return ':'; 
break;
case 43: /*lista3D.push(';');*/return 14; 
break;
case 44: /*lista3D.push(yy_.yytext);*/return 'abstract'; 
break;
case 45: /*lista3D.push(yy_.yytext);*/return 21; 
break;
case 46: /*lista3D.push(yy_.yytext);*/return 'break'; 
break;
case 47: /*lista3D.push(yy_.yytext);*/return 'case'; 
break;
case 48: /*lista3D.push(yy_.yytext);*/return 'catch'; 
break;
case 49: /*lista3D.push(yy_.yytext);*/return 'break'; 
break;
case 50: /*lista3D.push(yy_.yytext);*/return 22; 
break;
case 51: /*lista3D.push(yy_.yytext);*/return 'class'; 
break;
case 52: /*lista3D.push(yy_.yytext);*/return 'continue'; 
break;
case 53: /*lista3D.push(yy_.yytext);*/return 'default'; 
break;
case 54: /*lista3D.push(yy_.yytext);*/return 'do'; 
break;
case 55: /*lista3D.push(yy_.yytext);*/return 19; 
break;
case 56: /*lista3D.push(yy_.yytext);*/return 'else'; 
break;
case 57: /*lista3D.push(yy_.yytext);*/return 'extends'; 
break;
case 58: /*lista3D.push(yy_.yytext);*/return 'final'; 
break;
case 59: /*lista3D.push(yy_.yytext);*/return 'for'; 
break;
case 60: /*lista3D.push(yy_.yytext);*/return 'graph_dot'; 
break;
case 61: /*lista3D.push(yy_.yytext);*/return 'if'; 
break;
case 62: /*lista3D.push(yy_.yytext);*/return 'import'; 
break;
case 63: /*lista3D.push(yy_.yytext);*/return 'instanceof'; 
break;
case 64: /*lista3D.push(yy_.yytext);*/return 18; 
break;
case 65: /*lista3D.push(yy_.yytext);*/return 'message'; 
break;
case 66: /*lista3D.push(yy_.yytext);*/return 'new'; 
break;
case 67: /*lista3D.push(yy_.yytext);*/return 'object'; 
break;
case 68: /*lista3D.push(yy_.yytext);*/return 'pow'; 
break;
case 69: /*lista3D.push(yy_.yytext);*/return 10; 
break;
case 70: /*lista3D.push(yy_.yytext);*/return 'private'; 
break;
case 71: /*lista3D.push(yy_.yytext);*/return 'protected'; 
break;
case 72: /*lista3D.push(yy_.yytext);*/return 'public'; 
break;
case 73: /*lista3D.push(yy_.yytext);*/return 'return'; 
break;
case 74: /*lista3D.push(yy_.yytext);*/return 'read_console'; 
break;
case 75: /*lista3D.push(yy_.yytext);*/return 'read_file'; 
break;
case 76: /*lista3D.push(yy_.yytext);*/return 'static'; 
break;
case 77: /*lista3D.push(yy_.yytext);*/return 'str'; 
break;
case 78: /*lista3D.push(yy_.yytext);*/return 20; 
break;
case 79: /*lista3D.push(yy_.yytext);*/return 'super'; 
break;
case 80: /*lista3D.push(yy_.yytext);*/return 'switch'; 
break;
case 81: /*lista3D.push(yy_.yytext);*/return 'continue'; 
break;
case 82: /*lista3D.push(yy_.yytext);*/return 'this'; 
break;
case 83: /*lista3D.push(yy_.yytext);*/return 'tochar'; 
break;
case 84: /*lista3D.push(yy_.yytext);*/return 'toDouble'; 
break;
case 85: /*lista3D.push(yy_.yytext);*/return 'toInt'; 
break;
case 86: /*lista3D.push(yy_.yytext);*/return 'try'; 
break;
case 87: /*lista3D.push(yy_.yytext);*/return 'while'; 
break;
case 88: /*lista3D.push(yy_.yytext);*/return 'write_file'; 
break;
case 89: /*lista3D.push(yy_.yytext);*/return 28; 
break;
case 90: /*lista3D.push(yy_.yytext);*/return 29; 
break;
case 91: /*lista3D.push(yy_.yytext);*/return 'null'; 
break;
case 92: /*lista3D.push(yy_.yytext);*/ return 16; 
break;
case 93:return 5
break;
case 94:return 'INVALIDO'
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\n+)/i,/^(?:\t+)/i,/^(?:\/\/[^\r\n]*[^\r\n])/i,/^(?:\/\*[^]*\*\/)/i,/^(?:\/\*[^"*"]\*\/)/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:"(\\.|[^"])*")/i,/^(?:'(\\.|[^'])*')/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+=)/i,/^(?:\*=)/i,/^(?:-=)/i,/^(?:\/=)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:\?\?)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\*)/i,/^(?:->)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:>)/i,/^(?:<)/i,/^(?:,)/i,/^(?:\.)/i,/^(?::)/i,/^(?:;)/i,/^(?:abstract\b)/i,/^(?:boolean\b)/i,/^(?:break\b)/i,/^(?:case\b)/i,/^(?:catch\b)/i,/^(?:break\b)/i,/^(?:char\b)/i,/^(?:class\b)/i,/^(?:continue\b)/i,/^(?:default\b)/i,/^(?:do\b)/i,/^(?:double\b)/i,/^(?:else\b)/i,/^(?:extends\b)/i,/^(?:final\b)/i,/^(?:for\b)/i,/^(?:graph_dot\b)/i,/^(?:if\b)/i,/^(?:import\b)/i,/^(?:instanceof\b)/i,/^(?:int\b)/i,/^(?:message\b)/i,/^(?:new\b)/i,/^(?:object\b)/i,/^(?:pow\b)/i,/^(?:println\b)/i,/^(?:private\b)/i,/^(?:protected\b)/i,/^(?:public\b)/i,/^(?:return\b)/i,/^(?:read_console\b)/i,/^(?:read_file\b)/i,/^(?:static\b)/i,/^(?:str\b)/i,/^(?:string\b)/i,/^(?:super\b)/i,/^(?:switch\b)/i,/^(?:continue\b)/i,/^(?:this\b)/i,/^(?:toChar\b)/i,/^(?:toDouble\b)/i,/^(?:toInt\b)/i,/^(?:try\b)/i,/^(?:while\b)/i,/^(?:write_file\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:null\b)/i,/^(?:([a-zA-Z]|_|\$)([a-zA-Z]|[0-9]|_|\$)*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = jaba;
exports.Parser = jaba.Parser;
exports.parse = function () { return jaba.parse.apply(jaba, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}