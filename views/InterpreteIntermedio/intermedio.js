/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var intermedio = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,26],$V2=[1,22],$V3=[1,23],$V4=[1,25],$V5=[1,24],$V6=[1,27],$V7=[1,16],$V8=[1,21],$V9=[1,15],$Va=[1,19],$Vb=[1,20],$Vc=[1,17],$Vd=[1,18],$Ve=[1,14],$Vf=[5,11,19,22,24,26,27,37,38,41,44,47,50,51,52,53],$Vg=[1,43],$Vh=[1,62],$Vi=[1,63],$Vj=[1,64],$Vk=[1,60],$Vl=[1,61],$Vm=[5,11,19,22,24,26,27,37,38,41,43,44,47,50,51,52,53],$Vn=[21,31],$Vo=[21,30,31,32,33,34,35,36,49,54,55],$Vp=[1,95],$Vq=[11,19,22,24,26,27,37,38,43,44,47,50,51,52,53];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"LINSTRUCCIONES":4,"EOF":5,"LINSTRUCCIONES2":6,"INSTRUCCION2":7,"VARDECLARACION":8,"IMPRIMIR":9,"ASIGNACION":10,"CLERANSCOPE":11,"ETIQUETA":12,"SALTOCONDICIONAL":13,"SALTO":14,"LLAMADA":15,"CLEANSCOPE":16,"INSTRUCCION":17,"METODO":18,"call":19,"id":20,";":21,"etiqueta":22,":":23,"if":24,"ER":25,"goto_":26,"ifelse":27,"(":28,"P":29,"<":30,")":31,">":32,"==":33,"!=":34,">=":35,"<=":36,"clean":37,"temporal":38,",":39,"E":40,"proc":41,"begin":42,"end":43,"imprimir":44,"MODE":45,"=":46,"stack":47,"[":48,"]":49,"heap":50,"p":51,"h":52,"var":53,"+":54,"-":55,"entero":56,"decimal":57,"intmode":58,"charmode":59,"decimalmode":60,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"CLERANSCOPE",19:"call",20:"id",21:";",22:"etiqueta",23:":",24:"if",26:"goto_",27:"ifelse",28:"(",30:"<",31:")",32:">",33:"==",34:"!=",35:">=",36:"<=",37:"clean",38:"temporal",39:",",41:"proc",42:"begin",43:"end",44:"imprimir",46:"=",47:"stack",48:"[",49:"]",50:"heap",51:"p",52:"h",53:"var",54:"+",55:"-",56:"entero",57:"decimal",58:"intmode",59:"charmode",60:"decimalmode"},
productions_: [0,[3,2],[6,2],[6,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[4,2],[4,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[15,3],[12,2],[13,5],[13,5],[25,5],[25,5],[25,5],[25,5],[25,5],[25,5],[16,7],[18,5],[9,7],[14,3],[10,4],[10,7],[10,7],[10,4],[10,4],[10,7],[10,7],[8,5],[8,5],[8,5],[8,5],[40,3],[40,3],[40,1],[29,1],[29,1],[29,1],[29,1],[29,1],[45,1],[45,1],[45,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
   

        var cadena = compilar($$[$0-1]);

        var resultados = [];

        resultados.push(stack);

        resultados.push(heap);

        resultados.push(temporales);

        resultados.push(cadena);

        return resultados;           
    
break;
case 2: case 13:
 this.$ =$$[$0-1] ; this.$.push($$[$0]);
break;
case 3: case 14:
 this.$ = []; this.$.push($$[$0]);
break;
case 4: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 15: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 52:
this.$=$$[$0];
break;
case 5: case 16:
this.$ = $$[$0];
break;
case 25:
this.$ = new Llamada(_$[$0-2].first_line,_$[$0-2].first_column, $$[$0-1]);
break;
case 26:
 this.$ = new Etiqueta(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1]);
break;
case 27:
 this.$ = new SaltoCondicional(_$[$0-4].first_line,_$[$0-4].first_column,$$[$0-3],$$[$0-1]);
break;
case 28:
 this.$ = new SaltoCondicionalI(_$[$0-4].first_line,_$[$0-4].first_column,$$[$0-3],$$[$0-1]);
break;
case 29:
 this.$ = new Menor(_$[$0-4].first_line,_$[$0-4].first_column,$$[$0-3],$$[$0-1]); 
break;
case 30:
 this.$ = new Mayor(_$[$0-4].first_line,_$[$0-4].first_column,$$[$0-3],$$[$0-1]); 
break;
case 31:
 this.$ = new Igual(_$[$0-4].first_line,_$[$0-4].first_column,$$[$0-3],$$[$0-1]); 
break;
case 32:
 this.$ = new Desigual(_$[$0-4].first_line,_$[$0-4].first_column,$$[$0-3],$$[$0-1]); 
break;
case 33:
 this.$ = new MayorIgual(_$[$0-4].first_line,_$[$0-4].first_column,$$[$0-3],$$[$0-1]); 
break;
case 34:
 this.$ = new MenorIgual(_$[$0-4].first_line,_$[$0-4].first_column,$$[$0-3],$$[$0-1]); 
break;
case 35:
this.$ = new CleanScope(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-2], $$[$0]);
break;
case 36:
 this.$ = new Metodo(_$[$0-4].first_line,_$[$0-4].first_column,$$[$0-3],$$[$0-1]);
break;
case 37:
this.$ = new Imprimir(_$[$0-6].first_line,_$[$0-6].first_column, $$[$0-4], $$[$0-2]);
break;
case 38:
 this.$ = new Salto(_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-1]);
break;
case 39: case 42: case 43:
this.$ = new Asignacion(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-3], $$[$0-1]);
break;
case 40:
this.$ = new Asignacion(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-6], new ExpStack(_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2]));
break;
case 41:
this.$ = new Asignacion(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-6], new ExpHeap(_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2]));
break;
case 44:
this.$ = new AsignacionStack(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-4], $$[$0-1]);
break;
case 45:
this.$ = new AsignacionHeap(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-4], $$[$0-1]);
break;
case 46:
 this.$ = new iniciarP(_$[$0-4].first_line,_$[$0-4].first_column, $$[$0-1]);
break;
case 47:
 this.$ = new iniciarH(_$[$0-4].first_line,_$[$0-4].first_column,$$[$0-1]);
break;
case 48:
 this.$ = new iniciarStack(_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 49:
 this.$ = new iniciarHeap(_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 50:
 this.$ = new Suma(_$[$0-2].first_line,_$[$0-2].first_column, $$[$0-2],$$[$0]);
break;
case 51:
 this.$ = new Resta(_$[$0-2].first_line,_$[$0-2].first_column, $$[$0-2],$$[$0]);
break;
case 53:
 this.$ =  new ExpInt(_$[$0].first_line, _$[$0].first_column, parseInt($$[$0]));
break;
case 54:
 this.$ =  new ExpDecimal(_$[$0].first_line, _$[$0].first_column, parseFloat($$[$0]));
break;
case 55:
this.$ = new ExpTemporal(_$[$0].first_line, _$[$0].first_column,$$[$0]); 
break;
case 56:
this.$ = new ExpP(_$[$0].first_line, _$[$0].first_column);
break;
case 57:
this.$ = new ExpH(_$[$0].first_line, _$[$0].first_column); 
break;
case 58:
this.$ = "i";
break;
case 59:
this.$ = "c";
break;
case 60:
this.$ = "d";
break;
}
},
table: [{3:1,4:2,8:4,9:5,10:6,11:$V0,12:9,13:10,14:11,15:12,16:13,17:3,18:8,19:$V1,22:$V2,24:$V3,26:$V4,27:$V5,37:$V6,38:$V7,41:$V8,44:$V9,47:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve},{1:[3]},{5:[1,28],8:4,9:5,10:6,11:$V0,12:9,13:10,14:11,15:12,16:13,17:29,18:8,19:$V1,22:$V2,24:$V3,26:$V4,27:$V5,37:$V6,38:$V7,41:$V8,44:$V9,47:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve},o($Vf,[2,14]),o($Vf,[2,15]),o($Vf,[2,16]),o($Vf,[2,17]),o($Vf,[2,18]),o($Vf,[2,19]),o($Vf,[2,20]),o($Vf,[2,21]),o($Vf,[2,22]),o($Vf,[2,23]),o($Vf,[2,24]),{47:[1,32],50:[1,33],51:[1,30],52:[1,31]},{28:[1,34]},{46:[1,35]},{46:[1,36]},{46:[1,37]},{48:[1,38]},{48:[1,39]},{20:[1,40]},{23:[1,41]},{25:42,28:$Vg},{25:44,28:$Vg},{22:[1,45]},{20:[1,46]},{28:[1,47]},{1:[2,1]},o($Vf,[2,13]),{46:[1,48]},{46:[1,49]},{48:[1,50]},{48:[1,51]},{45:52,58:[1,53],59:[1,54],60:[1,55]},{29:59,38:$Vh,40:56,47:[1,57],50:[1,58],51:$Vi,52:$Vj,56:$Vk,57:$Vl},{29:59,38:$Vh,40:65,51:$Vi,52:$Vj,56:$Vk,57:$Vl},{29:59,38:$Vh,40:66,51:$Vi,52:$Vj,56:$Vk,57:$Vl},{29:67,38:$Vh,51:$Vi,52:$Vj,56:$Vk,57:$Vl},{29:68,38:$Vh,51:$Vi,52:$Vj,56:$Vk,57:$Vl},{42:[1,69]},o($Vm,[2,26]),{26:[1,70]},{29:71,38:$Vh,51:$Vi,52:$Vj,56:$Vk,57:$Vl},{26:[1,72]},{21:[1,73]},{21:[1,74]},{38:[1,75]},{29:59,38:$Vh,40:76,51:$Vi,52:$Vj,56:$Vk,57:$Vl},{29:59,38:$Vh,40:77,51:$Vi,52:$Vj,56:$Vk,57:$Vl},{49:[1,78]},{49:[1,79]},{39:[1,80]},{39:[2,58]},{39:[2,59]},{39:[2,60]},{21:[1,81]},{48:[1,82]},{48:[1,83]},o($Vn,[2,52],{54:[1,84],55:[1,85]}),o($Vo,[2,53]),o($Vo,[2,54]),o($Vo,[2,55]),o($Vo,[2,56]),o($Vo,[2,57]),{21:[1,86]},{21:[1,87]},{49:[1,88]},{49:[1,89]},{6:90,7:91,8:92,9:93,10:94,11:$Vp,12:96,13:97,14:98,15:99,16:100,19:$V1,22:$V2,24:$V3,26:$V4,27:$V5,37:$V6,38:$V7,44:$V9,47:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve},{22:[1,101]},{30:[1,102],32:[1,103],33:[1,104],34:[1,105],35:[1,106],36:[1,107]},{22:[1,108]},o($Vm,[2,38]),o($Vm,[2,25]),{39:[1,109]},{21:[1,110]},{21:[1,111]},{21:[1,112]},{21:[1,113]},{38:[1,114]},o($Vm,[2,39]),{29:115,38:$Vh,51:$Vi,52:$Vj,56:$Vk,57:$Vl},{29:116,38:$Vh,51:$Vi,52:$Vj,56:$Vk,57:$Vl},{29:117,38:$Vh,51:$Vi,52:$Vj,56:$Vk,57:$Vl},{29:118,38:$Vh,51:$Vi,52:$Vj,56:$Vk,57:$Vl},o($Vm,[2,42]),o($Vm,[2,43]),{46:[1,119]},{46:[1,120]},{7:122,8:92,9:93,10:94,11:$Vp,12:96,13:97,14:98,15:99,16:100,19:$V1,22:$V2,24:$V3,26:$V4,27:$V5,37:$V6,38:$V7,43:[1,121],44:$V9,47:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve},o($Vq,[2,3]),o($Vq,[2,4]),o($Vq,[2,5]),o($Vq,[2,6]),o($Vq,[2,7]),o($Vq,[2,8]),o($Vq,[2,9]),o($Vq,[2,10]),o($Vq,[2,11]),o($Vq,[2,12]),{21:[1,123]},{29:124,38:$Vh,51:$Vi,52:$Vj,56:$Vk,57:$Vl},{29:125,38:$Vh,51:$Vi,52:$Vj,56:$Vk,57:$Vl},{29:126,38:$Vh,51:$Vi,52:$Vj,56:$Vk,57:$Vl},{29:127,38:$Vh,51:$Vi,52:$Vj,56:$Vk,57:$Vl},{29:128,38:$Vh,51:$Vi,52:$Vj,56:$Vk,57:$Vl},{29:129,38:$Vh,51:$Vi,52:$Vj,56:$Vk,57:$Vl},{21:[1,130]},{29:59,38:$Vh,40:131,51:$Vi,52:$Vj,56:$Vk,57:$Vl},o($Vm,[2,46]),o($Vm,[2,47]),o($Vm,[2,48]),o($Vm,[2,49]),{31:[1,132]},{49:[1,133]},{49:[1,134]},o($Vn,[2,50]),o($Vn,[2,51]),{29:59,38:$Vh,40:135,51:$Vi,52:$Vj,56:$Vk,57:$Vl},{29:59,38:$Vh,40:136,51:$Vi,52:$Vj,56:$Vk,57:$Vl},o($Vf,[2,36]),o($Vq,[2,2]),o($Vm,[2,27]),{31:[1,137]},{31:[1,138]},{31:[1,139]},{31:[1,140]},{31:[1,141]},{31:[1,142]},o($Vm,[2,28]),{31:[1,143]},{21:[1,144]},{21:[1,145]},{21:[1,146]},{21:[1,147]},{21:[1,148]},{26:[2,29]},{26:[2,30]},{26:[2,31]},{26:[2,32]},{26:[2,33]},{26:[2,34]},{21:[1,149]},o($Vm,[2,37]),o($Vm,[2,40]),o($Vm,[2,41]),o($Vm,[2,44]),o($Vm,[2,45]),o($Vm,[2,35])],
defaultActions: {28:[2,1],53:[2,58],54:[2,59],55:[2,60],137:[2,29],138:[2,30],139:[2,31],140:[2,32],141:[2,33],142:[2,34]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


var p = 0;

var h = 0;

var nulo = 201213050*7;

var stack = {};

var heap = {};

var temporales = {};

var salidas = [];

var metodos = {};









function compilar(raiz)

{       

    /*Primero los metodos */

    raiz.forEach(element => 

    {

        if(element instanceof Metodo)

        {

            element.ejecutar();

        }            

    });  

    /*Ejecucion*/

    raiz.forEach(element => 

        {

            if(element instanceof Metodo)

            { 

                ////console.log("ya");                         

            }            

            else

            {
                element.ejecutar();
            }

        });  

    //console.log("------------Consola de salida--------------");

    var salida="";

    salidas.forEach(item =>

    {

        salida+=item; 

    });
    //console.log("-------------------------------Salida------------------");
    //console.log(salida);
    return salida;
    /*
    console.log("-------------------------------Stack------------------");
    console.log(stack);
    
    console.log("-------------------------------Heap------------------");
    console.log(heap);
    */
    ///console.log(temporales);

}



var CleanScope = function(linea, columna, i ,t)

{

    var self = this;

    self.linea = linea;

    self.columna = columna;

    self.inicio = i;

    self.tamano = t;

    self.ejecutar = function()

    {



    }

};









var Resultado = function(linea, columna, valor)

{

    var self = this;

    self.linea = linea;

    self.columna = columna;

    self.valor = valor;

    self.etiqueta = "";

};





var Llamada = function(linea, columna, id)

{   

    var self = this;

    self.linea = linea;

    self.columna = columna; 

    self.id = id;             

    self.ejecutar = function()

    {                                 

        ////console.log("Buscando metodo " + self.id);                

        var metodo = metodos[self.id];                

        if(metodo != null)

        {

            ////console.log(metodo);            

            metodo.ejecutar2();

        }

    }    

};



var Asignacion = function(linea, columna, id, valor)

{

    var self = this;

    self.linea = linea;

    self.columna = columna;

    self.id = id ;

    self.valor = valor;

    self.ejecutar = function()

    {          

        

        if(self.valor == null)

        {

            ////console.log("Temporal\t" +self.id+"\tlinea:"+self.linea +" columna:"+ self.columna); 

            ////console.log(self);      

            return;

        }  

        else

        {

            var resultado = self.valor.ejecutar();  

            if(self.valor instanceof ExpStack)

            {

                ////console.log("expstack    "+resultado.valor);

            }                       

            switch(self.id)

            {

                case "p":

                    p = resultado.valor;

                break;

                case "h":

                    h  = resultado.valor;

                break;

                default:

                    temporales[self.id] = resultado.valor;

                break;

            }



        }            

    }

};



var AsignacionHeap = function(linea, columna, id, valor)

{

    var self = this;

    self.linea = linea;

    self.columna = columna;

    self.id = id ;

    self.valor = valor;

    self.ejecutar = function()

    {

        var resultado = self.valor.ejecutar();

        var posicion = self.id.ejecutar();

        heap[posicion.valor] = resultado.valor;

    }

};

var AsignacionStack = function(linea, columna, id, valor)

{

    var self = this;

    self.linea = linea;

    self.columna = columna;

    self.id = id ;

    self.valor = valor;

    self.ejecutar = function()

    {

        var resultado = self.valor.ejecutar();

        var posicion = self.id.ejecutar();

        ////console.log("["+posicion.valor+"] = "+resultado.valor);

        stack[posicion.valor] = resultado.valor;

    }

};



var Suma = function(linea, columna, i, d)

{   

    var self = this;

    self.linea = linea;

    self.columna = columna;

    self.operandoI = i;

    self.operandoD = d;

    self.ejecutar = function()

    {

        var ri = self.operandoI.ejecutar();

        var rd = self.operandoD.ejecutar();

        var resultado = new Resultado(self.linea, self.columna, ri.valor + rd.valor);              

        return resultado;        

    }    

};



var Multiplicacion = function(linea, columna, i, d)

{   

    var self = this;

    self.linea = linea;

    self.columna = columna;

    self.operandoI = i;

    self.operandoD = d;

    self.ejecutar = function()

    {

        var ri = self.operandoI.ejecutar();

        var rd = self.operandoD.ejecutar();

        var resultado = new Resultado(self.linea, self.columna, ri.valor * rd.valor);              

        return resultado;        

    }    

};



var Division = function(linea, columna, i, d)

{   

    var self = this;

    self.linea = linea;

    self.columna = columna;

    self.operandoI = i;

    self.operandoD = d;

    self.ejecutar = function()

    {

        var ri = self.operandoI.ejecutar();

        var rd = self.operandoD.ejecutar();

        var resultado = new Resultado(self.linea, self.columna, ri.valor / rd.valor);              

        return resultado;        

    }    

};



var Resta = function(linea, columna, i, d)

{   

    var self = this;

    self.linea = linea;

    self.columna = columna;

    self.operandoI = i;

    self.operandoD = d;

    self.ejecutar = function()

    {

        var ri = self.operandoI.ejecutar();

        var rd = self.operandoD.ejecutar();

        var resultado = new Resultado(self.linea, self.columna, ri.valor - rd.valor);              

        return resultado;        

    }    

};



var Modulo = function(linea, columna, i, d)

{   

    var self = this;

    self.linea = linea;

    self.columna = columna;

    self.operandoI = i;

    self.operandoD = d;

    self.ejecutar = function()

    {

        var ri = self.operandoI.ejecutar();

        var rd = self.operandoD.ejecutar();

        var resultado = new Resultado(self.linea, self.columna, ri.valor % rd.valor);              

        return resultado;        

    }    

};



var ExpInt = function(linea, columna, v)

{   

    var self = this;

    self.linea = linea;

    self.columna = columna;

    self.valor = v;        

    self.ejecutar = function()

    {                         

        var resultado = new Resultado(self.linea, self.columna, self.valor);              

        return resultado;

    }    

};



var ExpDecimal = function(linea, columna, v)

{   

    var self = this;

    self.linea = linea;

    self.columna = columna;

    self.valor = v;           

    self.ejecutar = function()

    {                                                 

        var resultado = new Resultado(self.linea, self.columna, self.valor);              

        return resultado;

    }    

};



var ExpTemporal = function(linea, columna, v)

{   

    var self = this;

    self.linea = linea;

    self.columna = columna;

    self.valor = v;           

    self.ejecutar = function()

    {                                                 

        var valor = temporales[self.valor];

        var resultado = new Resultado(self.linea, self.columna, valor );              

        return resultado;

    }    

};



var ExpH = function(linea, columna)

{   

    var self = this;

    self.linea = linea;

    self.columna = columna;                

    self.ejecutar = function()

    {                                                 

        var valor = h;

        ////console.log("valor h:"+valor);

        var resultado = new Resultado(self.linea, self.columna, valor );              

        return resultado;

    }    

};



var ExpP = function(linea, columna)

{   

    var self = this;

    self.linea = linea;

    self.columna = columna;              

    self.ejecutar = function()

    {                                                 

        var valor = p;

        var resultado = new Resultado(self.linea, self.columna, valor );              

        return resultado;

    }    

};



var ExpStack = function(linea, columna, p)

{

    var self = this;

    self.linea = linea;

    self.columna = columna;

    self.posicion = p;

    self.ejecutar = function()

    {

        var tmp = self.posicion.ejecutar();     

        var tmp1 = stack[tmp.valor];

        //console.log("stack["+tmp.valor+"] = "+tmp1);       

        var resultado = new Resultado(self.linea, self.columna, tmp1,0,0);              

        return resultado;        

    }

};



var ExpHeap = function(linea, columna, p)

{

    var self = this;

    self.linea = linea;

    self.columna = columna;

    self.posicion = p;

    self.ejecutar = function()

    {

        var tmp = self.posicion.ejecutar();

        var resultado = new Resultado(self.linea, self.columna, heap[tmp.valor]);              

        return resultado;        

    }

};



var Metodo = function(linea, columna, id, li)

{

    var self = this;

    self.linea = linea;

    self.columna = columna ;

    self.id = id;

    self.instrucciones = li;



    self.ejecutar = function()

    {

        metodos[self.id] = self;        

    }



    self.ejecutar2 = function()

    {        

        var i = 0;

        var element ;

        //console.log("Ejecutando la funcion "+self.id+ "\tInstrucciones: "+self.instrucciones.length);

        for(i = 0 ; i  < self.instrucciones.length; i++)

        {            

            element = self.instrucciones[i];                              

            var resultado;

            if(element instanceof Salto)

            { 

                var etiqueta = element.destino;

                //console.log(i+") goto \t" +etiqueta);

                var j =0;

                

                for(j=0 ; j< self.instrucciones.length; j++)

                {                       

                    if(self.instrucciones[j] instanceof Etiqueta)

                    {

                        //console.log(self.instrucciones[j].destino+ "== "+etiqueta);

                        if( self.instrucciones[j].destino == etiqueta)

                        {                            

                            i =  j ;                            

                            break;

                        }

                    }

                }



            }            

            else

            if(element instanceof SaltoCondicional)

            {

                var etiqueta = element.ejecutar()

                //console.log(i +") goto if  \t"+ element.destino);                

                if(etiqueta.valor != "")

                {

                    var j =0;

                    for(j=0 ; j< self.instrucciones.length; j++)

                    {                       

                        if(self.instrucciones[j] instanceof Etiqueta)

                        {

                            if( self.instrucciones[j].destino == etiqueta.valor)

                            {

                                i = j;

                                break;

                            }

                        }

                    }   

                }                                      

            }

            else

            if(element instanceof SaltoCondicionalI)

            {

                var etiqueta = element.ejecutar()

                ////console.log("etiqueta" +etiqueta.valor);

                if(etiqueta.valor != "")

                {

                    var j =0;

                    for(j=0 ; j< self.instrucciones.length; j++)

                    {                       

                        if(self.instrucciones[j] instanceof Etiqueta)

                        {

                            if( self.instrucciones[j].destino == etiqueta.valor)

                            {

                                i = j;

                                break;

                            }

                        }

                    }   

                }                

            }            

            else

            {                

                //console.log(i+") "+element.id);                

                element.ejecutar();

            }

        }

    }

};



var Salto = function(linea, columna, d)

{

    var self = this;

    self.linea = linea;

    self.columna = columna;

    self.destino = d;

    self.ejecutar = function()

    {



    }

};



var SaltoCondicional = function(linea, columna, condicion, destino)

{

    var self = this;

    self.linea = linea;

    self.columna = columna;

    self.condicion = condicion;

    self.destino = destino;

    self.ejecutar = function()

    {

        var condicional = self.condicion.ejecutar();        

        if(condicional.valor)

        {

            ////console.log("Hay que saltar a "+ self.destino);

            var resultado = new Resultado(self.linea, self.columna, self.destino);              

            return resultado;            

        }

        var resultado = new Resultado(self.linea, self.columna, "");              

        return resultado;            

    }

}

;



var SaltoCondicionalI = function(linea, columna, condicion, destino)

{

    var self = this;

    self.linea = linea;

    self.columna = columna;

    self.condicion = condicion;

    self.destino = destino;

    self.ejecutar = function()

    {

        var condicional = self.condicion.ejecutar();

        if(!condicional.valor)

        {

            var resultado = new Resultado(self.linea, self.columna, self.destino);              

            return resultado;            

        }

        var resultado = new Resultado(self.linea, self.columna, "");              

        return resultado;           

    }

}

;



var Etiqueta = function(linea, columna, id)

{

    var self = this;

    self.linea = linea;

    self.columna = columna;

    self.destino = id;

    self.ejecutar = function()

    {

        var resultado = new Resultado(self.linea, self.columna, self.destino);              

        return resultado;           

    }

};







var Igual = function(linea, columna, i, d)

{

    var self = this;

    self.linea = linea;

    self.columna = columna;

    self.izquiera = i;

    self.derecha = d;

    self.ejecutar = function()

    {

        var valori = self.izquiera.ejecutar();

        var valord = self.derecha.ejecutar();

        ////console.log(valori.valor+"=="+valord.valor);

        if(valori.valor == valord.valor)

        {

            var resultado = new Resultado(self.linea, self.columna, true);              

            return resultado;             

        }

        var resultado = new Resultado(self.linea, self.columna, false);              

        return resultado;             

    }

}





var Desigual = function(linea, columna, i, d)

{

    var self = this;

    self.linea = linea;

    self.columna = columna;

    self.izquiera = i;

    self.derecha = d;

    self.ejecutar = function()

    {

        var valori = self.izquiera.ejecutar();

        var valord = self.derecha.ejecutar();

        //console.log(valori.valor + "!=" + valord.valor);

        if(valori.valor != valord.valor)

        {

            var resultado = new Resultado(self.linea, self.columna, true);              

            return resultado;             

        }

        var resultado = new Resultado(self.linea, self.columna, false);              

        return resultado;             

    }

}





var Mayor = function(linea, columna, i, d)

{

    var self = this;

    self.linea = linea;

    self.columna = columna;

    self.izquiera = i;

    self.derecha = d;

    self.ejecutar = function()

    {

        var valori = self.izquiera.ejecutar();

        var valord = self.derecha.ejecutar();

        if(valori.valor > valord.valor)

        {

            var resultado = new Resultado(self.linea, self.columna, true);              

            return resultado;             

        }

        var resultado = new Resultado(self.linea, self.columna, false);              

        return resultado;             

    }

}



var Menor = function(linea, columna, i, d)

{

    var self = this;

    self.linea = linea;

    self.columna = columna;

    self.izquiera = i;

    self.derecha = d;

    self.ejecutar = function()

    {

        var valori = self.izquiera.ejecutar();

        var valord = self.derecha.ejecutar();

        if(valori.valor < valord.valor)

        {

            var resultado = new Resultado(self.linea, self.columna, true);              

            return resultado;             

        }

        var resultado = new Resultado(self.linea, self.columna, false);              

        return resultado;             

    }

}





var MenorIgual = function(linea, columna, i, d)

{

    var self = this;

    self.linea = linea;

    self.columna = columna;

    self.izquiera = i;

    self.derecha = d;

    self.ejecutar = function()

    {

        var valori = self.izquiera.ejecutar();

        var valord = self.derecha.ejecutar();

        if(valori.valor <= valord.valor)

        {

            var resultado = new Resultado(self.linea, self.columna, true);              

            return resultado;             

        }

        var resultado = new Resultado(self.linea, self.columna, false);              

        return resultado;             

    }

}



var MayorIgual = function(linea, columna, i, d)

{

    var self = this;

    self.linea = linea;

    self.columna = columna;

    self.izquiera = i;

    self.derecha = d;

    self.ejecutar = function()

    {

        var valori = self.izquiera.ejecutar();

        var valord = self.derecha.ejecutar();        

        if(valori.valor >= valord.valor)

        {

            var resultado = new Resultado(self.linea, self.columna, true);              

            return resultado;             

        }

        var resultado = new Resultado(self.linea, self.columna, false);              

        return resultado;             

    }

}



var Imprimir = function(linea, columna, modo, temporal)

{

    var self = this;

    self.linea = linea;

    self.columna = columna ;

    self.modo = modo;

    self.temporal = temporal;

    self.ejecutar = function()

    {        

        //console.log(stack);        

        var valor = temporales[self.temporal];                

        switch(self.modo)

        {

            case "i":

                salidas.push(parseInt(valor));

            break;

            case "c":

                salidas.push(String.fromCharCode(parseInt(valor)));

            break;

            case "d":

                var residuo = valor % 1;                

                if(residuo!=0)

                {                    

                    salidas.push(parseFloat(valor));

                }

                else

                {                    

                    salidas.push(parseFloat(valor)+".00");

                }                

            break;                        

        }

    }

};



var Resultado = function(linea, columna, valor, referencia, tipo)

{

    var self = this;

    self.linea = linea;

    self.columna = columna;

    self.valor = valor;

    self.referencia = referencia;

    self.tipo = tipo;

    self.flag = 0; /*0 es valor, 1 es referencia */

};



var iniciarP = function(linea, columna, valor)

{

    var self = this;

    self.linea = linea;

    self.columna = columna;

    self.valor = valor;

    self.ejecutar = function()

    {        

        var resultado = self.valor.ejecutar();

        p = resultado.valor;

        //console.log("Iniciando p:"+p);

    }

}



var iniciarH = function(linea, columna, valor)

{

    var self = this;

    self.linea = linea;

    self.columna = columna;

    self.valor = valor;

    self.ejecutar = function()

    {

        var resultado = self.valor.ejecutar();

        h = resultado.valor;

        //console.log("Iniciando h:"+h);

    }

}



var iniciarHeap = function(linea, columna)

{

    var self = this;

    self.linea = linea;

    self.columna = columna;    

    self.ejecutar = function()

    {

        heap = {};        

        //console.log("Iniciando heap "+heap);

    }

}



var iniciarStack = function(linea, columna)

{

    var self = this;

    self.linea = linea;

    self.columna = columna;    

    self.ejecutar = function()

    {

        stack = {};

        //console.log("Iniciando Stack "+stack);

    }

}





	/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip whitespace */
break;
case 2:/* skip whitespace */
break;
case 3:return;
break;
case 4:return;
break;
case 5:return;
break;
case 6:return 57
break;
case 7:return 56
break;
case 8:/*IGNORAR*/;
break;
case 9: console.log(yy_.yytext);return 38
break;
case 10:return 22;
break;
case 11:return 59
break;
case 12:return 58
break;
case 13:return 60
break;
case 14:return '*'
break;
case 15:return '/'
break;
case 16:return 55
break;
case 17:return 54
break;
case 18:return '%'
break;
case 19:return 23
break;
case 20:return 21
break;
case 21:return 39
break;
case 22:return 34
break;
case 23:return 33
break;
case 24:return 35
break;
case 25:return 36
break;
case 26:return 46
break;
case 27:return 32
break;
case 28:return 30
break;
case 29:return 48
break;
case 30:return 49
break;
case 31:return 28
break;
case 32:return 31
break;
case 33:return '{'
break;
case 34:return '}'
break;
case 35:return 53
break;
case 36:return 19
break;
case 37:return 41
break;
case 38:return 42
break;
case 39:return 43
break;
case 40:return 37
break;
case 41: /*//console.log(yy_.yytext);*/return 51; 
break;
case 42: /*//console.log("-heap puntero-"+ yy_.yytext);*/return 52; 
break;
case 43:return 47
break;
case 44:return 50
break;
case 45:return 44
break;
case 46:return 26
break;
case 47:return 'iffalse'
break;
case 48:return 24
break;
case 49:  return 20; 
break;
case 50:return 5
break;
case 51:return 'INVALIDO'
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\n+)/i,/^(?:\t+)/i,/^(?:\/\/[^\r\n]*[^\r\n])/i,/^(?:\/\*[^]*\*\/)/i,/^(?:\/\*[^"*"]\*\/)/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:\/\/(.)*)/i,/^(?:t[0-9]+\b)/i,/^(?:L[0-9]+\b)/i,/^(?:"%c")/i,/^(?:"%e")/i,/^(?:"%d")/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:%)/i,/^(?::)/i,/^(?:;)/i,/^(?:,)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:var\b)/i,/^(?:call\b)/i,/^(?:proc\b)/i,/^(?:begin\b)/i,/^(?:end\b)/i,/^(?:\$\$_clean_scope\b)/i,/^(?:p\b)/i,/^(?:h\b)/i,/^(?:stack\b)/i,/^(?:heap\b)/i,/^(?:print\b)/i,/^(?:goto\b)/i,/^(?:iffalse\b)/i,/^(?:if\b)/i,/^(?:([a-zA-Z]|_|\$)([a-zA-Z]|[0-9]|_|\$)*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = intermedio;
exports.Parser = intermedio.Parser;
exports.parse = function () { return intermedio.parse.apply(intermedio, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}