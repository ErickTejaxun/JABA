/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica3D = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[5,7],$V2=[1,22],$V3=[1,24],$V4=[1,25],$V5=[1,29],$V6=[1,32],$V7=[1,31],$V8=[1,33],$V9=[1,34],$Va=[1,26],$Vb=[1,35],$Vc=[1,36],$Vd=[1,37],$Ve=[1,38],$Vf=[1,39],$Vg=[1,40],$Vh=[1,28],$Vi=[1,30],$Vj=[10,22,25,26,34,36,37,38,39,40,42,43,44,45,46,47,48,56],$Vk=[8,19],$Vl=[1,60],$Vm=[1,61],$Vn=[1,62],$Vo=[1,63],$Vp=[1,64],$Vq=[1,65],$Vr=[1,66],$Vs=[1,67],$Vt=[1,68],$Vu=[1,69],$Vv=[8,10,22,25,26,34,36,37,38,39,40,42,43,44,45,46,47,48,51,56];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"ENTRADA":3,"INICIO":4,"EOF":5,"METODO":6,"begin":7,",":8,"id":9,"end":10,"INTRUCCIONES":11,"lectura":12,"INSTRUCCION":13,"ASIGNACION":14,"SALTO":15,"CONDICIONAL":16,"IMPRIMIR":17,"ETIQUETA":18,":":19,"LLAMADA":20,"LECTURA":21,"=":22,"VALOR":23,"OPARIT":24,"=>":25,"<=":26,"temporal":27,"h":28,"p":29,"numero":30,"decimal":31,"heap":32,"stack":33,"etiqueta":34,"\\0":35,"-":36,"+":37,"*":38,"/":39,"jmp":40,"OPREL":41,"je":42,"jne":43,"jg":44,"jge":45,"jl":46,"jle":47,"print":48,"(":49,"IMPR":50,")":51,";":52,"printFloat":53,"printCaracter":54,"printEntero":55,"call":56,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"begin",8:",",9:"id",10:"end",12:"lectura",19:":",22:"=",25:"=>",26:"<=",27:"temporal",28:"h",29:"p",30:"numero",31:"decimal",32:"heap",33:"stack",34:"etiqueta",35:"\\0",36:"-",37:"+",38:"*",39:"/",40:"jmp",42:"je",43:"jne",44:"jg",45:"jge",46:"jl",47:"jle",48:"print",49:"(",51:")",52:";",53:"printFloat",54:"printCaracter",55:"printEntero",56:"call"},
productions_: [0,[3,2],[4,2],[4,1],[6,10],[6,11],[6,11],[11,2],[11,1],[13,1],[13,1],[13,1],[13,1],[13,2],[13,1],[13,1],[14,6],[14,7],[14,7],[14,7],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,2],[24,1],[24,1],[24,1],[24,1],[15,5],[16,7],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[17,7],[50,1],[50,1],[50,1],[18,3],[18,1],[20,5],[21,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

    console.log(" * * * * * * CORRECTO 3D * * * * * * *");
    return $$[$0-1]; 

break;
case 2:

		//nodo  = new Nodo("INICIO",$$[$0-1],_$[$0-1],[$$[$0-1],$$[$0]]);
		nodo  = $$[$0-1];
		nodo.hijos.push($$[$0]);
		this.$ = nodo;
	
break;
case 3:

		nodo  = new Nodo("INICIO",$$[$0],_$[$0],[$$[$0]]);
		this.$ = nodo;
	
break;
case 4:

        nodo1 = new Nodo('id',$$[$0-5],_$[$0-5],[]);
		nodo  = new Nodo("METODO",$$[$0-9],_$[$0-9],[nodo1]);
		this.$ = nodo;
	
break;
case 5: case 6:

        nodo1 = new Nodo('id',$$[$0-6],_$[$0-6],[]);
		nodo  = new Nodo("METODO",$$[$0-10],_$[$0-10],[nodo1,$$[$0-5]]);
		this.$ = nodo;
	
break;
case 7:

		nodo  = $$[$0-1];
		nodo.hijos.push($$[$0]);
		this.$ = nodo;
	
break;
case 8:

		nodo  = new Nodo("INTRUCCIONES",$$[$0],_$[$0],[$$[$0]]);
		this.$ = nodo;
	
break;
case 9:

		//nodo  = new Nodo("INSTRUCCION",$$[$0],_$[$0],[$$[$0]]);
		//this.$ = nodo;
		this.$ = $$[$0];
	
break;
case 10: case 11: case 12: case 14: case 15:

		this.$ = $$[$0];
	
break;
case 13:

		this.$ = $$[$0-1];
	
break;
case 16:

        nodo1 = new Nodo('=',$$[$0-5],_$[$0-5],[]);
		nodo  = new Nodo("ASIGNACION",$$[$0-5],_$[$0-5],[nodo1,$$[$0-3],$$[$0]]);
		this.$ = nodo;
	
break;
case 17:

        //nodo1 = new Nodo('=',$$[$0-6],_$[$0-6],[]);
		nodo  = new Nodo("ASIGNACION",$$[$0-6],_$[$0-6],[$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]]);
		this.$ = nodo;
	
break;
case 18:

        nodo1 = new Nodo('=>',$$[$0-6],_$[$0-6],[]);
        //nodo7 = new Nodo('heap',$$[$0],_$[$0],[]);
		nodo  = new Nodo("ASIGNACION",$$[$0-6],_$[$0-6],[nodo1,$$[$0-4],$$[$0-2],$$[$0]]);
		this.$ = nodo;
	
break;
case 19:

        nodo1 = new Nodo('<=',$$[$0-6],_$[$0-6],[]);
		//nodo7 = new Nodo('stack',$$[$0],_$[$0],[]);
		nodo  = new Nodo("ASIGNACION",$$[$0-6],_$[$0-6],[nodo1,$$[$0-4],$$[$0-2],$$[$0]]);
		this.$ = nodo;
	
break;
case 20:

        nodo1 = new Nodo('temporal',$$[$0],_$[$0],[]);
		nodo  = new Nodo("VALOR",$$[$0],_$[$0],[nodo1]);
		this.$ = nodo;
	
break;
case 21:

        nodo1 = new Nodo('h',$$[$0],_$[$0],[]);
		nodo  = new Nodo("VALOR",$$[$0],_$[$0],[nodo1]);
		this.$ = nodo;
	
break;
case 22:

        nodo1 = new Nodo('p',$$[$0],_$[$0],[]);
		nodo  = new Nodo("VALOR",$$[$0],_$[$0],[nodo1]);
		this.$ = nodo;
	
break;
case 23:

        nodo1 = new Nodo('numero',$$[$0],_$[$0],[]);
		nodo  = new Nodo("VALOR",$$[$0],_$[$0],[nodo1]);
		this.$ = nodo;
	
break;
case 24:

        nodo1 = new Nodo('decimal',$$[$0],_$[$0],[]);
		nodo  = new Nodo("VALOR",$$[$0],_$[$0],[nodo1]);
		this.$ = nodo;
	
break;
case 25:

        nodo1 = new Nodo('heap',$$[$0],_$[$0],[]);
		nodo  = new Nodo("VALOR",$$[$0],_$[$0],[nodo1]);
		this.$ = nodo;
	
break;
case 26:

        nodo1 = new Nodo('stack',$$[$0],_$[$0],[]);
		nodo  = new Nodo("VALOR",$$[$0],_$[$0],[nodo1]);
		this.$ = nodo;
	
break;
case 27:

        nodo1 = new Nodo('etiqueta',$$[$0],_$[$0],[]);
		nodo  = new Nodo("VALOR",$$[$0],_$[$0],[nodo1]);
		this.$ = nodo;
	
break;
case 28:

        nodo1 = new Nodo('fin',$$[$0],_$[$0],[]);
		nodo  = new Nodo("VALOR",$$[$0],_$[$0],[nodo1]);
		this.$ = nodo;
	
break;
case 29:

        nodo1 = new Nodo('-',$$[$0-1],_$[$0-1],[]);
		nodo  = new Nodo("VALOR",$$[$0-1],_$[$0-1],[nodo1, $$[$0]]);
		this.$ = nodo;
	
break;
case 30:

        nodo1 = new Nodo('+',$$[$0],_$[$0],[]);
		nodo  = new Nodo("OPARIT",$$[$0],_$[$0],[nodo1]);
		this.$ = nodo;
	
break;
case 31:

        nodo1 = new Nodo('-',$$[$0],_$[$0],[]);
		nodo  = new Nodo("OPARIT",$$[$0],_$[$0],[nodo1]);
		this.$ = nodo;
	
break;
case 32:

        nodo1 = new Nodo('*',$$[$0],_$[$0],[]);
		nodo  = new Nodo("OPARIT",$$[$0],_$[$0],[nodo1]);
		this.$ = nodo;
	
break;
case 33:

        nodo1 = new Nodo('/',$$[$0],_$[$0],[]);
		nodo  = new Nodo("OPARIT",$$[$0],_$[$0],[nodo1]);
		this.$ = nodo;
	
break;
case 34:

        nodo1 = new Nodo('jmp',$$[$0-4],_$[$0-4],[]);
        nodo2 = new Nodo('etiqueta',$$[$0],_$[$0],[]);
		nodo  = new Nodo("SALTO",$$[$0-4],_$[$0-4],[nodo1,nodo2]);
		this.$ = nodo;
	
break;
case 35:

        nodo7 = new Nodo('etiqueta',$$[$0],_$[$0],[]);
		nodo  = new Nodo("CONDICIONAL",$$[$0-6],_$[$0-6],[$$[$0-6],$$[$0-4],$$[$0-2],nodo7]);
		this.$ = nodo;
	
break;
case 36:

        nodo1 = new Nodo('je',$$[$0],_$[$0],[]);
		nodo  = new Nodo("OPREL",$$[$0],_$[$0],[nodo1]);
		this.$ = nodo;
	
break;
case 37:

        nodo1 = new Nodo('jne',$$[$0],_$[$0],[]);
		nodo  = new Nodo("OPREL",$$[$0],_$[$0],[nodo1]);
		this.$ = nodo;
	
break;
case 38:

        nodo1 = new Nodo('jg',$$[$0],_$[$0],[]);
		nodo  = new Nodo("OPREL",$$[$0],_$[$0],[nodo1]);
		this.$ = nodo;
	
break;
case 39:

        nodo1 = new Nodo('jge',$$[$0],_$[$0],[]);
		nodo  = new Nodo("OPREL",$$[$0],_$[$0],[nodo1]);
		this.$ = nodo;
	
break;
case 40:

        nodo1 = new Nodo('jl',$$[$0],_$[$0],[]);
		nodo  = new Nodo("OPREL",$$[$0],_$[$0],[nodo1]);
		this.$ = nodo;
	
break;
case 41:

        nodo1 = new Nodo('jle',$$[$0],_$[$0],[]);
		nodo  = new Nodo("OPREL",$$[$0],_$[$0],[nodo1]);
		this.$ = nodo;
	
break;
case 42:

       nodo1 = new Nodo('print',$$[$0-6],_$[$0-6],[]);
		nodo  = new Nodo("IMPRIMIR",$$[$0-6],_$[$0-6],[nodo1,$$[$0-4],$$[$0-2]]);
		this.$ = nodo;
	
break;
case 43:

        nodo1 = new Nodo('printFloat',$$[$0],_$[$0],[]);
		nodo  = new Nodo("IMPR",$$[$0],_$[$0],[nodo1]);
		this.$ = nodo;
	
break;
case 44:

        nodo1 = new Nodo('printCaracter',$$[$0],_$[$0],[]);
		nodo  = new Nodo("IMPR",$$[$0],_$[$0],[nodo1]);
		this.$ = nodo;
	
break;
case 45:

        nodo1 = new Nodo('printEntero',$$[$0],_$[$0],[]);
		nodo  = new Nodo("IMPR",$$[$0],_$[$0],[nodo1]);
		this.$ = nodo;
	
break;
case 46:

        nodo2 = new Nodo('etiqueta',$$[$0],_$[$0],[]);
		//nodo  = new Nodo("ETIQUETA",$$[$0-2],_$[$0-2],[$$[$0-2],nodo2]);
		//this.$ = nodo;
		nodo  = $$[$0-2];
		nodo.hijos.push(nodo2);
		this.$ = nodo;
	
break;
case 47:

        nodo1 = new Nodo('etiqueta',$$[$0],_$[$0],[]);
		nodo  = new Nodo("ETIQUETA",$$[$0],_$[$0],[nodo1]);
		this.$ = nodo;
	
break;
case 48:

        nodo1 = new Nodo('call',$$[$0-4],_$[$0-4],[]);
        nodo2 = new Nodo('id',$$[$0],_$[$0],[]);
		nodo  = new Nodo("LLAMADA",$$[$0-4],_$[$0-4],[nodo1,nodo2]);
		this.$ = nodo;
	
break;
case 49:

        nodo1 = new Nodo('call',$$[$0-4],_$[$0-4],[]);
        nodo2 = new Nodo('lectura',$$[$0],_$[$0],[]);
		nodo  = new Nodo("LECTURA",$$[$0-4],_$[$0-4],[nodo1,nodo2]);
		this.$ = nodo;
	
break;
}
},
table: [{3:1,4:2,6:3,7:$V0},{1:[3]},{5:[1,5],6:6,7:$V0},o($V1,[2,3]),{8:[1,7]},{1:[2,1]},o($V1,[2,2]),{8:[1,8]},{8:[1,9]},{9:[1,10],12:[1,11]},{10:[1,12],11:13,13:14,14:15,15:16,16:17,17:18,18:19,20:20,21:21,22:$V2,24:23,25:$V3,26:$V4,34:$V5,36:$V6,37:$V7,38:$V8,39:$V9,40:$Va,41:27,42:$Vb,43:$Vc,44:$Vd,45:$Ve,46:$Vf,47:$Vg,48:$Vh,56:$Vi},{11:41,13:14,14:15,15:16,16:17,17:18,18:19,20:20,21:21,22:$V2,24:23,25:$V3,26:$V4,34:$V5,36:$V6,37:$V7,38:$V8,39:$V9,40:$Va,41:27,42:$Vb,43:$Vc,44:$Vd,45:$Ve,46:$Vf,47:$Vg,48:$Vh,56:$Vi},{8:[1,42]},{10:[1,43],13:44,14:15,15:16,16:17,17:18,18:19,20:20,21:21,22:$V2,24:23,25:$V3,26:$V4,34:$V5,36:$V6,37:$V7,38:$V8,39:$V9,40:$Va,41:27,42:$Vb,43:$Vc,44:$Vd,45:$Ve,46:$Vf,47:$Vg,48:$Vh,56:$Vi},o($Vj,[2,8]),o($Vj,[2,9]),o($Vj,[2,10]),o($Vj,[2,11]),o($Vj,[2,12]),{8:[1,46],19:[1,45]},o($Vj,[2,14]),o($Vj,[2,15]),{8:[1,47]},{8:[1,48]},{8:[1,49]},{8:[1,50]},{8:[1,51]},{8:[1,52]},{49:[1,53]},o($Vk,[2,47]),{8:[1,54]},{8:[2,30]},{8:[2,31]},{8:[2,32]},{8:[2,33]},{8:[2,36]},{8:[2,37]},{8:[2,38]},{8:[2,39]},{8:[2,40]},{8:[2,41]},{10:[1,55],13:44,14:15,15:16,16:17,17:18,18:19,20:20,21:21,22:$V2,24:23,25:$V3,26:$V4,34:$V5,36:$V6,37:$V7,38:$V8,39:$V9,40:$Va,41:27,42:$Vb,43:$Vc,44:$Vd,45:$Ve,46:$Vf,47:$Vg,48:$Vh,56:$Vi},{8:[1,56]},{8:[1,57]},o($Vj,[2,7]),o($Vj,[2,13]),{34:[1,58]},{23:59,27:$Vl,28:$Vm,29:$Vn,30:$Vo,31:$Vp,32:$Vq,33:$Vr,34:$Vs,35:$Vt,36:$Vu},{23:70,27:$Vl,28:$Vm,29:$Vn,30:$Vo,31:$Vp,32:$Vq,33:$Vr,34:$Vs,35:$Vt,36:$Vu},{23:71,27:$Vl,28:$Vm,29:$Vn,30:$Vo,31:$Vp,32:$Vq,33:$Vr,34:$Vs,35:$Vt,36:$Vu},{23:72,27:$Vl,28:$Vm,29:$Vn,30:$Vo,31:$Vp,32:$Vq,33:$Vr,34:$Vs,35:$Vt,36:$Vu},{8:[1,73]},{23:74,27:$Vl,28:$Vm,29:$Vn,30:$Vo,31:$Vp,32:$Vq,33:$Vr,34:$Vs,35:$Vt,36:$Vu},{50:75,53:[1,76],54:[1,77],55:[1,78]},{8:[1,79]},{8:[1,80]},{8:[1,81]},{8:[1,82]},o($Vk,[2,46]),{8:[1,83]},o($Vv,[2,20]),o($Vv,[2,21]),o($Vv,[2,22]),o($Vv,[2,23]),o($Vv,[2,24]),o($Vv,[2,25]),o($Vv,[2,26]),o($Vv,[2,27]),o($Vv,[2,28]),{23:84,27:$Vl,28:$Vm,29:$Vn,30:$Vo,31:$Vp,32:$Vq,33:$Vr,34:$Vs,35:$Vt,36:$Vu},{8:[1,85]},{8:[1,86]},{8:[1,87]},{8:[1,88]},{8:[1,89]},{8:[1,90]},{8:[2,43]},{8:[2,44]},{8:[2,45]},{8:[1,91]},{8:[1,92]},{9:[1,93]},{8:[1,94]},{8:[1,95]},o($Vv,[2,29]),{23:96,27:$Vl,28:$Vm,29:$Vn,30:$Vo,31:$Vp,32:$Vq,33:$Vr,34:$Vs,35:$Vt,36:$Vu},{23:97,27:$Vl,28:$Vm,29:$Vn,30:$Vo,31:$Vp,32:$Vq,33:$Vr,34:$Vs,35:$Vt,36:$Vu},{23:98,27:$Vl,28:$Vm,29:$Vn,30:$Vo,31:$Vp,32:$Vq,33:$Vr,34:$Vs,35:$Vt,36:$Vu},{34:[1,99]},{23:100,27:$Vl,28:$Vm,29:$Vn,30:$Vo,31:$Vp,32:$Vq,33:$Vr,34:$Vs,35:$Vt,36:$Vu},{23:101,27:$Vl,28:$Vm,29:$Vn,30:$Vo,31:$Vp,32:$Vq,33:$Vr,34:$Vs,35:$Vt,36:$Vu},{9:[1,102],12:[1,103]},{8:[1,104]},o($V1,[2,4]),{9:[1,105]},{23:106,27:$Vl,28:$Vm,29:$Vn,30:$Vo,31:$Vp,32:$Vq,33:$Vr,34:$Vs,35:$Vt,36:$Vu},{8:[1,107]},{8:[1,108]},{8:[1,109]},o($Vj,[2,34]),{8:[1,110]},{51:[1,111]},o($Vj,[2,48]),o($Vj,[2,49]),{12:[1,112]},o($V1,[2,5]),o($Vj,[2,16]),{23:113,27:$Vl,28:$Vm,29:$Vn,30:$Vo,31:$Vp,32:$Vq,33:$Vr,34:$Vs,35:$Vt,36:$Vu},{23:114,27:$Vl,28:$Vm,29:$Vn,30:$Vo,31:$Vp,32:$Vq,33:$Vr,34:$Vs,35:$Vt,36:$Vu},{23:115,27:$Vl,28:$Vm,29:$Vn,30:$Vo,31:$Vp,32:$Vq,33:$Vr,34:$Vs,35:$Vt,36:$Vu},{34:[1,116]},{52:[1,117]},o($V1,[2,6]),o($Vj,[2,17]),o($Vj,[2,18]),o($Vj,[2,19]),o($Vj,[2,35]),o($Vj,[2,42])],
defaultActions: {5:[2,1],31:[2,30],32:[2,31],33:[2,32],34:[2,33],35:[2,36],36:[2,37],37:[2,38],38:[2,39],39:[2,40],40:[2,41],76:[2,43],77:[2,44],78:[2,45]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


function Nodo(nombre, token, posicion, hijos){
	this.nombre = nombre;
	this.token = token;
	this.posicion = posicion;
	this.hijos = hijos;	
}

parser.arbol ={
	raiz:null
};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip whitespace */
break;
case 2:/* skip whitespace */
break;
case 3:return 31
break;
case 4:return 30
break;
case 5:/*IGNORAR*/;
break;
case 6:return 27
break;
case 7:return 34;
break;
case 8:return 38
break;
case 9:return 39
break;
case 10:return 36
break;
case 11:return 37
break;
case 12:return 8
break;
case 13:return 19
break;
case 14:return 42
break;
case 15:return 43
break;
case 16:return 44
break;
case 17:return 45
break;
case 18:return 46
break;
case 19:return 47
break;
case 20:return 40
break;
case 21:return 26
break;
case 22:return 25
break;
case 23:return 22
break;
case 24:return 7
break;
case 25:return 10
break;
case 26:return 56
break;
case 27:return 33
break;
case 28:return 32
break;
case 29:return 29
break;
case 30:return 28
break;
case 31:return 49
break;
case 32:return 51
break;
case 33:return 52
break;
case 34:return 35
break;
case 35:return 48
break;
case 36:return 54
break;
case 37:return 55
break;
case 38:return 53
break;
case 39:return 12
break;
case 40:return 9
break;
case 41:return 5
break;
case 42:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\n+)/i,/^(?:\t+)/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:\/\/(.)*)/i,/^(?:t[0-9]+\b)/i,/^(?:L[0-9]+\b)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:,)/i,/^(?::)/i,/^(?:je\b)/i,/^(?:jne\b)/i,/^(?:jg\b)/i,/^(?:jge\b)/i,/^(?:jl\b)/i,/^(?:jle\b)/i,/^(?:jmp\b)/i,/^(?:<=)/i,/^(?:=>)/i,/^(?:=)/i,/^(?:begin\b)/i,/^(?:end\b)/i,/^(?:call\b)/i,/^(?:stack\b)/i,/^(?:heap\b)/i,/^(?:P\b)/i,/^(?:H\b)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:\\0)/i,/^(?:print\b)/i,/^(?:"%c")/i,/^(?:"%d")/i,/^(?:"%f")/i,/^(?:\$_in_value\b)/i,/^(?:[a-zA-z_0-9]+)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica3D;
exports.Parser = gramatica3D.Parser;
exports.parse = function () { return gramatica3D.parse.apply(gramatica3D, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}